// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.6.1
// source: auctioneer.proto

// We can't rename this to auctioneerrpc, otherwise it would be a breaking
// change since the package name is also contained in the HTTP URIs and old
// clients would call the wrong endpoints. Luckily with the go_package option we
// can have different golang and RPC package names.

package auctioneerrpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ChannelType int32

const (
	// The channel supports static to_remote keys.
	ChannelType_TWEAKLESS ChannelType = 0
	// The channel uses an anchor-based commitment.
	ChannelType_ANCHORS ChannelType = 1
	//
	//The channel build upon the anchor-based commitment and requires an
	//additional CLTV of the channel lease maturity on any commitment and HTLC
	//outputs that pay directly to the channel initiator (the seller).
	ChannelType_SCRIPT_ENFORCED_LEASE ChannelType = 2
)

// Enum value maps for ChannelType.
var (
	ChannelType_name = map[int32]string{
		0: "TWEAKLESS",
		1: "ANCHORS",
		2: "SCRIPT_ENFORCED_LEASE",
	}
	ChannelType_value = map[string]int32{
		"TWEAKLESS":             0,
		"ANCHORS":               1,
		"SCRIPT_ENFORCED_LEASE": 2,
	}
)

func (x ChannelType) Enum() *ChannelType {
	p := new(ChannelType)
	*p = x
	return p
}

func (x ChannelType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChannelType) Descriptor() protoreflect.EnumDescriptor {
	return file_auctioneer_proto_enumTypes[0].Descriptor()
}

func (ChannelType) Type() protoreflect.EnumType {
	return &file_auctioneer_proto_enumTypes[0]
}

func (x ChannelType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChannelType.Descriptor instead.
func (ChannelType) EnumDescriptor() ([]byte, []int) {
	return file_auctioneer_proto_rawDescGZIP(), []int{0}
}

type AuctionAccountState int32

const (
	//
	//The account's funding transaction is not yet confirmed on-chain.
	AuctionAccountState_STATE_PENDING_OPEN AuctionAccountState = 0
	//
	//The account is fully open and confirmed on-chain.
	AuctionAccountState_STATE_OPEN AuctionAccountState = 1
	//
	//The account is still open but the CLTV expiry has passed and the trader can
	//close it without the auctioneer's key. Orders for accounts in this state
	//won't be accepted.
	AuctionAccountState_STATE_EXPIRED AuctionAccountState = 2
	//
	//The account was modified by a deposit or withdrawal and is currently waiting
	//for the modifying transaction to confirm.
	AuctionAccountState_STATE_PENDING_UPDATE AuctionAccountState = 3
	//
	//The account is closed. The auctioneer doesn't track whether the closing
	//transaction is already confirmed on-chain or not.
	AuctionAccountState_STATE_CLOSED AuctionAccountState = 4
	//
	//The account has recently participated in a batch and is not yet confirmed.
	AuctionAccountState_STATE_PENDING_BATCH AuctionAccountState = 5
	//
	//The account has reached the expiration height while it had a pending update
	//that hasn't yet confirmed. This allows accounts to be renewed once
	//confirmed and expired.
	AuctionAccountState_STATE_EXPIRED_PENDING_UPDATE AuctionAccountState = 6
)

// Enum value maps for AuctionAccountState.
var (
	AuctionAccountState_name = map[int32]string{
		0: "STATE_PENDING_OPEN",
		1: "STATE_OPEN",
		2: "STATE_EXPIRED",
		3: "STATE_PENDING_UPDATE",
		4: "STATE_CLOSED",
		5: "STATE_PENDING_BATCH",
		6: "STATE_EXPIRED_PENDING_UPDATE",
	}
	AuctionAccountState_value = map[string]int32{
		"STATE_PENDING_OPEN":           0,
		"STATE_OPEN":                   1,
		"STATE_EXPIRED":                2,
		"STATE_PENDING_UPDATE":         3,
		"STATE_CLOSED":                 4,
		"STATE_PENDING_BATCH":          5,
		"STATE_EXPIRED_PENDING_UPDATE": 6,
	}
)

func (x AuctionAccountState) Enum() *AuctionAccountState {
	p := new(AuctionAccountState)
	*p = x
	return p
}

func (x AuctionAccountState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuctionAccountState) Descriptor() protoreflect.EnumDescriptor {
	return file_auctioneer_proto_enumTypes[1].Descriptor()
}

func (AuctionAccountState) Type() protoreflect.EnumType {
	return &file_auctioneer_proto_enumTypes[1]
}

func (x AuctionAccountState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuctionAccountState.Descriptor instead.
func (AuctionAccountState) EnumDescriptor() ([]byte, []int) {
	return file_auctioneer_proto_rawDescGZIP(), []int{1}
}

type OrderChannelType int32

const (
	// Used to set defaults when a trader doesn't specify a channel type.
	OrderChannelType_ORDER_CHANNEL_TYPE_UNKNOWN OrderChannelType = 0
	//
	//The channel type will vary per matched channel based on the features shared
	//between its participants.
	OrderChannelType_ORDER_CHANNEL_TYPE_PEER_DEPENDENT OrderChannelType = 1
	//
	//A channel type that builds upon the anchors commitment format to enforce
	//channel lease maturities in the commitment and HTLC outputs that pay to the
	//channel initiator/seller.
	OrderChannelType_ORDER_CHANNEL_TYPE_SCRIPT_ENFORCED OrderChannelType = 2
)

// Enum value maps for OrderChannelType.
var (
	OrderChannelType_name = map[int32]string{
		0: "ORDER_CHANNEL_TYPE_UNKNOWN",
		1: "ORDER_CHANNEL_TYPE_PEER_DEPENDENT",
		2: "ORDER_CHANNEL_TYPE_SCRIPT_ENFORCED",
	}
	OrderChannelType_value = map[string]int32{
		"ORDER_CHANNEL_TYPE_UNKNOWN":         0,
		"ORDER_CHANNEL_TYPE_PEER_DEPENDENT":  1,
		"ORDER_CHANNEL_TYPE_SCRIPT_ENFORCED": 2,
	}
)

func (x OrderChannelType) Enum() *OrderChannelType {
	p := new(OrderChannelType)
	*p = x
	return p
}

func (x OrderChannelType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderChannelType) Descriptor() protoreflect.EnumDescriptor {
	return file_auctioneer_proto_enumTypes[2].Descriptor()
}

func (OrderChannelType) Type() protoreflect.EnumType {
	return &file_auctioneer_proto_enumTypes[2]
}

func (x OrderChannelType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderChannelType.Descriptor instead.
func (OrderChannelType) EnumDescriptor() ([]byte, []int) {
	return file_auctioneer_proto_rawDescGZIP(), []int{2}
}

type NodeTier int32

const (
	// The default node tier. This value will be determined at run-time by the
	// current order version.
	NodeTier_TIER_DEFAULT NodeTier = 0
	// Tier 0, bid with this tier are opting out of the smaller "higher
	// quality" pool of nodes to match their bids. Nodes in this tier are
	// considered to have "no rating".
	NodeTier_TIER_0 NodeTier = 1
	// Tier 1, the "base" node tier. Nodes in this tier are shown to have a
	// higher degree of up time and route-ability compared to the rest of the
	// nodes in the network. This is the current default node tier when
	// submitting bid orders.
	NodeTier_TIER_1 NodeTier = 2
)

// Enum value maps for NodeTier.
var (
	NodeTier_name = map[int32]string{
		0: "TIER_DEFAULT",
		1: "TIER_0",
		2: "TIER_1",
	}
	NodeTier_value = map[string]int32{
		"TIER_DEFAULT": 0,
		"TIER_0":       1,
		"TIER_1":       2,
	}
)

func (x NodeTier) Enum() *NodeTier {
	p := new(NodeTier)
	*p = x
	return p
}

func (x NodeTier) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NodeTier) Descriptor() protoreflect.EnumDescriptor {
	return file_auctioneer_proto_enumTypes[3].Descriptor()
}

func (NodeTier) Type() protoreflect.EnumType {
	return &file_auctioneer_proto_enumTypes[3]
}

func (x NodeTier) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NodeTier.Descriptor instead.
func (NodeTier) EnumDescriptor() ([]byte, []int) {
	return file_auctioneer_proto_rawDescGZIP(), []int{3}
}

// Channel announcement constraints for matched channels.
type ChannelAnnouncementConstraints int32

const (
	ChannelAnnouncementConstraints_ANNOUNCEMENT_NO_PREFERENCE ChannelAnnouncementConstraints = 0
	ChannelAnnouncementConstraints_ONLY_ANNOUNCED             ChannelAnnouncementConstraints = 1
	ChannelAnnouncementConstraints_ONLY_UNANNOUNCED           ChannelAnnouncementConstraints = 2
)

// Enum value maps for ChannelAnnouncementConstraints.
var (
	ChannelAnnouncementConstraints_name = map[int32]string{
		0: "ANNOUNCEMENT_NO_PREFERENCE",
		1: "ONLY_ANNOUNCED",
		2: "ONLY_UNANNOUNCED",
	}
	ChannelAnnouncementConstraints_value = map[string]int32{
		"ANNOUNCEMENT_NO_PREFERENCE": 0,
		"ONLY_ANNOUNCED":             1,
		"ONLY_UNANNOUNCED":           2,
	}
)

func (x ChannelAnnouncementConstraints) Enum() *ChannelAnnouncementConstraints {
	p := new(ChannelAnnouncementConstraints)
	*p = x
	return p
}

func (x ChannelAnnouncementConstraints) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChannelAnnouncementConstraints) Descriptor() protoreflect.EnumDescriptor {
	return file_auctioneer_proto_enumTypes[4].Descriptor()
}

func (ChannelAnnouncementConstraints) Type() protoreflect.EnumType {
	return &file_auctioneer_proto_enumTypes[4]
}

func (x ChannelAnnouncementConstraints) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChannelAnnouncementConstraints.Descriptor instead.
func (ChannelAnnouncementConstraints) EnumDescriptor() ([]byte, []int) {
	return file_auctioneer_proto_rawDescGZIP(), []int{4}
}

type OrderState int32

const (
	OrderState_ORDER_SUBMITTED        OrderState = 0
	OrderState_ORDER_CLEARED          OrderState = 1
	OrderState_ORDER_PARTIALLY_FILLED OrderState = 2
	OrderState_ORDER_EXECUTED         OrderState = 3
	OrderState_ORDER_CANCELED         OrderState = 4
	OrderState_ORDER_EXPIRED          OrderState = 5
	OrderState_ORDER_FAILED           OrderState = 6
)

// Enum value maps for OrderState.
var (
	OrderState_name = map[int32]string{
		0: "ORDER_SUBMITTED",
		1: "ORDER_CLEARED",
		2: "ORDER_PARTIALLY_FILLED",
		3: "ORDER_EXECUTED",
		4: "ORDER_CANCELED",
		5: "ORDER_EXPIRED",
		6: "ORDER_FAILED",
	}
	OrderState_value = map[string]int32{
		"ORDER_SUBMITTED":        0,
		"ORDER_CLEARED":          1,
		"ORDER_PARTIALLY_FILLED": 2,
		"ORDER_EXECUTED":         3,
		"ORDER_CANCELED":         4,
		"ORDER_EXPIRED":          5,
		"ORDER_FAILED":           6,
	}
)

func (x OrderState) Enum() *OrderState {
	p := new(OrderState)
	*p = x
	return p
}

func (x OrderState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderState) Descriptor() protoreflect.EnumDescriptor {
	return file_auctioneer_proto_enumTypes[5].Descriptor()
}

func (OrderState) Type() protoreflect.EnumType {
	return &file_auctioneer_proto_enumTypes[5]
}

func (x OrderState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderState.Descriptor instead.
func (OrderState) EnumDescriptor() ([]byte, []int) {
	return file_auctioneer_proto_rawDescGZIP(), []int{5}
}

type DurationBucketState int32

const (
	//
	//NO_MARKET indicates that this bucket doesn't actually exist, in that no
	//market is present for this market.
	DurationBucketState_NO_MARKET DurationBucketState = 0
	//
	//MARKET_CLOSED indicates that this market exists, but that it isn't currently
	//running.
	DurationBucketState_MARKET_CLOSED DurationBucketState = 1
	//
	//ACCEPTING_ORDERS indicates that we're accepting orders for this bucket, but
	//not yet clearing for this duration.
	DurationBucketState_ACCEPTING_ORDERS DurationBucketState = 2
	//
	//MARKET_OPEN indicates that we're accepting orders, and fully clearing the
	//market for this duration.
	DurationBucketState_MARKET_OPEN DurationBucketState = 3
)

// Enum value maps for DurationBucketState.
var (
	DurationBucketState_name = map[int32]string{
		0: "NO_MARKET",
		1: "MARKET_CLOSED",
		2: "ACCEPTING_ORDERS",
		3: "MARKET_OPEN",
	}
	DurationBucketState_value = map[string]int32{
		"NO_MARKET":        0,
		"MARKET_CLOSED":    1,
		"ACCEPTING_ORDERS": 2,
		"MARKET_OPEN":      3,
	}
)

func (x DurationBucketState) Enum() *DurationBucketState {
	p := new(DurationBucketState)
	*p = x
	return p
}

func (x DurationBucketState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DurationBucketState) Descriptor() protoreflect.EnumDescriptor {
	return file_auctioneer_proto_enumTypes[6].Descriptor()
}

func (DurationBucketState) Type() protoreflect.EnumType {
	return &file_auctioneer_proto_enumTypes[6]
}

func (x DurationBucketState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DurationBucketState.Descriptor instead.
func (DurationBucketState) EnumDescriptor() ([]byte, []int) {
	return file_auctioneer_proto_rawDescGZIP(), []int{6}
}

type OrderMatchReject_RejectReason int32

const (
	// The reason cannot be mapped to a specific code.
	OrderMatchReject_UNKNOWN OrderMatchReject_RejectReason = 0
	//
	//The client didn't come up with the same result as the server and is
	//rejecting the batch because of that.
	OrderMatchReject_SERVER_MISBEHAVIOR OrderMatchReject_RejectReason = 1
	//
	//The client doesn't support the current batch verification version the
	//server is using.
	OrderMatchReject_BATCH_VERSION_MISMATCH OrderMatchReject_RejectReason = 2
	//
	//The client rejects some of the orders, not the full batch. When this
	//code is set, the rejected_orders map must be set.
	OrderMatchReject_PARTIAL_REJECT OrderMatchReject_RejectReason = 3
)

// Enum value maps for OrderMatchReject_RejectReason.
var (
	OrderMatchReject_RejectReason_name = map[int32]string{
		0: "UNKNOWN",
		1: "SERVER_MISBEHAVIOR",
		2: "BATCH_VERSION_MISMATCH",
		3: "PARTIAL_REJECT",
	}
	OrderMatchReject_RejectReason_value = map[string]int32{
		"UNKNOWN":                0,
		"SERVER_MISBEHAVIOR":     1,
		"BATCH_VERSION_MISMATCH": 2,
		"PARTIAL_REJECT":         3,
	}
)

func (x OrderMatchReject_RejectReason) Enum() *OrderMatchReject_RejectReason {
	p := new(OrderMatchReject_RejectReason)
	*p = x
	return p
}

func (x OrderMatchReject_RejectReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderMatchReject_RejectReason) Descriptor() protoreflect.EnumDescriptor {
	return file_auctioneer_proto_enumTypes[7].Descriptor()
}

func (OrderMatchReject_RejectReason) Type() protoreflect.EnumType {
	return &file_auctioneer_proto_enumTypes[7]
}

func (x OrderMatchReject_RejectReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderMatchReject_RejectReason.Descriptor instead.
func (OrderMatchReject_RejectReason) EnumDescriptor() ([]byte, []int) {
	return file_auctioneer_proto_rawDescGZIP(), []int{12, 0}
}

type OrderReject_OrderRejectReason int32

const (
	//
	//The trader's client has a preference to only match orders with peers it
	//doesn't already have channels with. The order that is rejected with this
	//reason type comes from a peer that the trader already has channels with.
	OrderReject_DUPLICATE_PEER OrderReject_OrderRejectReason = 0
	//
	//The trader's client couldn't connect to the remote node of the matched
	//order or the channel funding could not be initialized for another
	//reason. This could also be the rejecting node's fault if their
	//connection is not stable. Using this code can have a negative impact on
	//the reputation score of both nodes, depending on the number of errors
	//recorded.
	OrderReject_CHANNEL_FUNDING_FAILED OrderReject_OrderRejectReason = 1
)

// Enum value maps for OrderReject_OrderRejectReason.
var (
	OrderReject_OrderRejectReason_name = map[int32]string{
		0: "DUPLICATE_PEER",
		1: "CHANNEL_FUNDING_FAILED",
	}
	OrderReject_OrderRejectReason_value = map[string]int32{
		"DUPLICATE_PEER":         0,
		"CHANNEL_FUNDING_FAILED": 1,
	}
)

func (x OrderReject_OrderRejectReason) Enum() *OrderReject_OrderRejectReason {
	p := new(OrderReject_OrderRejectReason)
	*p = x
	return p
}

func (x OrderReject_OrderRejectReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderReject_OrderRejectReason) Descriptor() protoreflect.EnumDescriptor {
	return file_auctioneer_proto_enumTypes[8].Descriptor()
}

func (OrderReject_OrderRejectReason) Type() protoreflect.EnumType {
	return &file_auctioneer_proto_enumTypes[8]
}

func (x OrderReject_OrderRejectReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderReject_OrderRejectReason.Descriptor instead.
func (OrderReject_OrderRejectReason) EnumDescriptor() ([]byte, []int) {
	return file_auctioneer_proto_rawDescGZIP(), []int{13, 0}
}

type SubscribeError_Error int32

const (
	//
	//The error cannot be mapped to a specific code.
	SubscribeError_UNKNOWN SubscribeError_Error = 0
	//
	//The server is shutting down for maintenance. Traders should close the
	//long-lived stream/connection and try to connect again after some time.
	SubscribeError_SERVER_SHUTDOWN SubscribeError_Error = 1
	//
	//The account the trader tried to subscribe to does not exist in the
	//auctioneer's database.
	SubscribeError_ACCOUNT_DOES_NOT_EXIST SubscribeError_Error = 2
	//
	//The account the trader tried to subscribe to was never completed and a
	//reservation for it is still pending.
	SubscribeError_INCOMPLETE_ACCOUNT_RESERVATION SubscribeError_Error = 3
)

// Enum value maps for SubscribeError_Error.
var (
	SubscribeError_Error_name = map[int32]string{
		0: "UNKNOWN",
		1: "SERVER_SHUTDOWN",
		2: "ACCOUNT_DOES_NOT_EXIST",
		3: "INCOMPLETE_ACCOUNT_RESERVATION",
	}
	SubscribeError_Error_value = map[string]int32{
		"UNKNOWN":                        0,
		"SERVER_SHUTDOWN":                1,
		"ACCOUNT_DOES_NOT_EXIST":         2,
		"INCOMPLETE_ACCOUNT_RESERVATION": 3,
	}
)

func (x SubscribeError_Error) Enum() *SubscribeError_Error {
	p := new(SubscribeError_Error)
	*p = x
	return p
}

func (x SubscribeError_Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubscribeError_Error) Descriptor() protoreflect.EnumDescriptor {
	return file_auctioneer_proto_enumTypes[9].Descriptor()
}

func (SubscribeError_Error) Type() protoreflect.EnumType {
	return &file_auctioneer_proto_enumTypes[9]
}

func (x SubscribeError_Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubscribeError_Error.Descriptor instead.
func (SubscribeError_Error) EnumDescriptor() ([]byte, []int) {
	return file_auctioneer_proto_rawDescGZIP(), []int{25, 0}
}

type AccountDiff_AccountState int32

const (
	AccountDiff_OUTPUT_RECREATED              AccountDiff_AccountState = 0
	AccountDiff_OUTPUT_DUST_EXTENDED_OFFCHAIN AccountDiff_AccountState = 1
	AccountDiff_OUTPUT_DUST_ADDED_TO_FEES     AccountDiff_AccountState = 2
	AccountDiff_OUTPUT_FULLY_SPENT            AccountDiff_AccountState = 3
)

// Enum value maps for AccountDiff_AccountState.
var (
	AccountDiff_AccountState_name = map[int32]string{
		0: "OUTPUT_RECREATED",
		1: "OUTPUT_DUST_EXTENDED_OFFCHAIN",
		2: "OUTPUT_DUST_ADDED_TO_FEES",
		3: "OUTPUT_FULLY_SPENT",
	}
	AccountDiff_AccountState_value = map[string]int32{
		"OUTPUT_RECREATED":              0,
		"OUTPUT_DUST_EXTENDED_OFFCHAIN": 1,
		"OUTPUT_DUST_ADDED_TO_FEES":     2,
		"OUTPUT_FULLY_SPENT":            3,
	}
)

func (x AccountDiff_AccountState) Enum() *AccountDiff_AccountState {
	p := new(AccountDiff_AccountState)
	*p = x
	return p
}

func (x AccountDiff_AccountState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccountDiff_AccountState) Descriptor() protoreflect.EnumDescriptor {
	return file_auctioneer_proto_enumTypes[10].Descriptor()
}

func (AccountDiff_AccountState) Type() protoreflect.EnumType {
	return &file_auctioneer_proto_enumTypes[10]
}

func (x AccountDiff_AccountState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccountDiff_AccountState.Descriptor instead.
func (AccountDiff_AccountState) EnumDescriptor() ([]byte, []int) {
	return file_auctioneer_proto_rawDescGZIP(), []int{30, 0}
}

type InvalidOrder_FailReason int32

const (
	InvalidOrder_INVALID_AMT InvalidOrder_FailReason = 0
)

// Enum value maps for InvalidOrder_FailReason.
var (
	InvalidOrder_FailReason_name = map[int32]string{
		0: "INVALID_AMT",
	}
	InvalidOrder_FailReason_value = map[string]int32{
		"INVALID_AMT": 0,
	}
)

func (x InvalidOrder_FailReason) Enum() *InvalidOrder_FailReason {
	p := new(InvalidOrder_FailReason)
	*p = x
	return p
}

func (x InvalidOrder_FailReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InvalidOrder_FailReason) Descriptor() protoreflect.EnumDescriptor {
	return file_auctioneer_proto_enumTypes[11].Descriptor()
}

func (InvalidOrder_FailReason) Type() protoreflect.EnumType {
	return &file_auctioneer_proto_enumTypes[11]
}

func (x InvalidOrder_FailReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InvalidOrder_FailReason.Descriptor instead.
func (InvalidOrder_FailReason) EnumDescriptor() ([]byte, []int) {
	return file_auctioneer_proto_rawDescGZIP(), []int{35, 0}
}

type ReserveAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//The desired value of the account in satoshis.
	AccountValue uint64 `protobuf:"varint,1,opt,name=account_value,json=accountValue,proto3" json:"account_value,omitempty"`
	//
	//The block height at which the account should expire.
	AccountExpiry uint32 `protobuf:"varint,2,opt,name=account_expiry,json=accountExpiry,proto3" json:"account_expiry,omitempty"`
	//
	//The trader's account key.
	TraderKey []byte `protobuf:"bytes,3,opt,name=trader_key,json=traderKey,proto3" json:"trader_key,omitempty"`
	//
	//The account version. Must be set to 0 for legacy (non-taproot) accounts.
	Version uint32 `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *ReserveAccountRequest) Reset() {
	*x = ReserveAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auctioneer_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReserveAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReserveAccountRequest) ProtoMessage() {}

func (x *ReserveAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auctioneer_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReserveAccountRequest.ProtoReflect.Descriptor instead.
func (*ReserveAccountRequest) Descriptor() ([]byte, []int) {
	return file_auctioneer_proto_rawDescGZIP(), []int{0}
}

func (x *ReserveAccountRequest) GetAccountValue() uint64 {
	if x != nil {
		return x.AccountValue
	}
	return 0
}

func (x *ReserveAccountRequest) GetAccountExpiry() uint32 {
	if x != nil {
		return x.AccountExpiry
	}
	return 0
}

func (x *ReserveAccountRequest) GetTraderKey() []byte {
	if x != nil {
		return x.TraderKey
	}
	return nil
}

func (x *ReserveAccountRequest) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type ReserveAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//The base key of the auctioneer. This key should be tweaked with the trader's
	//per-batch tweaked key to obtain the corresponding per-batch tweaked
	//auctioneer key. Or, in case of the version 1, Taproot enabled account, the
	//trader and auctioneer key will be combined into a MuSig2 combined key that
	//is static throughout the lifetime of the account. The on-chain uniqueness of
	//the generated output will be ensured by the merkle root hash that is applied
	//as a tweak to the MuSig2 combined internal key. The merkle root hash is
	//either the hash of the timeout script path (which uses the trader key
	//tweaked with the per-batch key) directly or the root of a tree with one leaf
	//that is the timeout script path and a leaf that is a Taro commitment (which
	//is a root hash by itself).
	AuctioneerKey []byte `protobuf:"bytes,1,opt,name=auctioneer_key,json=auctioneerKey,proto3" json:"auctioneer_key,omitempty"`
	//
	//The initial per-batch key to be used for the account. For every cleared
	//batch that the account participates in, this key will be incremented by the
	//base point of its curve, resulting in a new key for both the trader and
	//auctioneer in every batch.
	InitialBatchKey []byte `protobuf:"bytes,2,opt,name=initial_batch_key,json=initialBatchKey,proto3" json:"initial_batch_key,omitempty"`
}

func (x *ReserveAccountResponse) Reset() {
	*x = ReserveAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auctioneer_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReserveAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReserveAccountResponse) ProtoMessage() {}

func (x *ReserveAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_auctioneer_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReserveAccountResponse.ProtoReflect.Descriptor instead.
func (*ReserveAccountResponse) Descriptor() ([]byte, []int) {
	return file_auctioneer_proto_rawDescGZIP(), []int{1}
}

func (x *ReserveAccountResponse) GetAuctioneerKey() []byte {
	if x != nil {
		return x.AuctioneerKey
	}
	return nil
}

func (x *ReserveAccountResponse) GetInitialBatchKey() []byte {
	if x != nil {
		return x.InitialBatchKey
	}
	return nil
}

type ServerInitAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//Transaction output of the account. Has to be unspent and be a P2WSH of
	//the account script below. The amount must also exactly correspond to the
	//account value below.
	AccountPoint *OutPoint `protobuf:"bytes,1,opt,name=account_point,json=accountPoint,proto3" json:"account_point,omitempty"`
	//
	//The script used to create the account point. For version 1 (Taproot enabled)
	//accounts this represents the 32-byte (x-only) Taproot public key with the
	//combined MuSig2 key of the auctioneer's key and the trader's key with the
	//expiry script path applied as a single tapscript leaf.
	AccountScript []byte `protobuf:"bytes,2,opt,name=account_script,json=accountScript,proto3" json:"account_script,omitempty"`
	//
	//The value of the account in satoshis. Must match the amount of the
	//account_point output.
	AccountValue uint64 `protobuf:"varint,3,opt,name=account_value,json=accountValue,proto3" json:"account_value,omitempty"`
	//
	//The block height at which the account should expire.
	AccountExpiry uint32 `protobuf:"varint,4,opt,name=account_expiry,json=accountExpiry,proto3" json:"account_expiry,omitempty"`
	//
	//The trader's account key.
	TraderKey []byte `protobuf:"bytes,5,opt,name=trader_key,json=traderKey,proto3" json:"trader_key,omitempty"`
	// The user agent string that identifies the software running on the user's
	// side. This can be changed in the user's client software but it _SHOULD_
	// conform to the following pattern and use less than 256 characters:
	//    Agent-Name/semver-version(/additional-info)
	// Examples:
	//    poold/v0.4.2-beta/commit=3b635821,initiator=pool-cli
	//    litd/v0.4.0-alpha/commit=326d754,initiator=lit-ui
	UserAgent string `protobuf:"bytes,6,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
	//
	//The account version. Must be set to 0 for legacy (non-taproot) accounts.
	Version uint32 `protobuf:"varint,7,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *ServerInitAccountRequest) Reset() {
	*x = ServerInitAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auctioneer_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerInitAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerInitAccountRequest) ProtoMessage() {}

func (x *ServerInitAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auctioneer_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerInitAccountRequest.ProtoReflect.Descriptor instead.
func (*ServerInitAccountRequest) Descriptor() ([]byte, []int) {
	return file_auctioneer_proto_rawDescGZIP(), []int{2}
}

func (x *ServerInitAccountRequest) GetAccountPoint() *OutPoint {
	if x != nil {
		return x.AccountPoint
	}
	return nil
}

func (x *ServerInitAccountRequest) GetAccountScript() []byte {
	if x != nil {
		return x.AccountScript
	}
	return nil
}

func (x *ServerInitAccountRequest) GetAccountValue() uint64 {
	if x != nil {
		return x.AccountValue
	}
	return 0
}

func (x *ServerInitAccountRequest) GetAccountExpiry() uint32 {
	if x != nil {
		return x.AccountExpiry
	}
	return 0
}

func (x *ServerInitAccountRequest) GetTraderKey() []byte {
	if x != nil {
		return x.TraderKey
	}
	return nil
}

func (x *ServerInitAccountRequest) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *ServerInitAccountRequest) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type ServerInitAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ServerInitAccountResponse) Reset() {
	*x = ServerInitAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auctioneer_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerInitAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerInitAccountResponse) ProtoMessage() {}

func (x *ServerInitAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_auctioneer_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerInitAccountResponse.ProtoReflect.Descriptor instead.
func (*ServerInitAccountResponse) Descriptor() ([]byte, []int) {
	return file_auctioneer_proto_rawDescGZIP(), []int{3}
}

type ServerSubmitOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Details:
	//	*ServerSubmitOrderRequest_Ask
	//	*ServerSubmitOrderRequest_Bid
	Details isServerSubmitOrderRequest_Details `protobuf_oneof:"details"`
	// The user agent string that identifies the software running on the user's
	// side. This can be changed in the user's client software but it _SHOULD_
	// conform to the following pattern and use less than 256 characters:
	//    Agent-Name/semver-version(/additional-info)
	// Examples:
	//    poold/v0.4.2-beta/commit=3b635821,initiator=pool-cli
	//    litd/v0.4.0-alpha/commit=326d754,initiator=lit-ui
	UserAgent string `protobuf:"bytes,3,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
}

func (x *ServerSubmitOrderRequest) Reset() {
	*x = ServerSubmitOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auctioneer_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerSubmitOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerSubmitOrderRequest) ProtoMessage() {}

func (x *ServerSubmitOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auctioneer_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerSubmitOrderRequest.ProtoReflect.Descriptor instead.
func (*ServerSubmitOrderRequest) Descriptor() ([]byte, []int) {
	return file_auctioneer_proto_rawDescGZIP(), []int{4}
}

func (m *ServerSubmitOrderRequest) GetDetails() isServerSubmitOrderRequest_Details {
	if m != nil {
		return m.Details
	}
	return nil
}

func (x *ServerSubmitOrderRequest) GetAsk() *ServerAsk {
	if x, ok := x.GetDetails().(*ServerSubmitOrderRequest_Ask); ok {
		return x.Ask
	}
	return nil
}

func (x *ServerSubmitOrderRequest) GetBid() *ServerBid {
	if x, ok := x.GetDetails().(*ServerSubmitOrderRequest_Bid); ok {
		return x.Bid
	}
	return nil
}

func (x *ServerSubmitOrderRequest) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

type isServerSubmitOrderRequest_Details interface {
	isServerSubmitOrderRequest_Details()
}

type ServerSubmitOrderRequest_Ask struct {
	//
	//Submit an ask order.
	Ask *ServerAsk `protobuf:"bytes,1,opt,name=ask,proto3,oneof"`
}

type ServerSubmitOrderRequest_Bid struct {
	//
	//Submit a bid order.
	Bid *ServerBid `protobuf:"bytes,2,opt,name=bid,proto3,oneof"`
}

func (*ServerSubmitOrderRequest_Ask) isServerSubmitOrderRequest_Details() {}

func (*ServerSubmitOrderRequest_Bid) isServerSubmitOrderRequest_Details() {}

type ServerSubmitOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Details:
	//	*ServerSubmitOrderResponse_InvalidOrder
	//	*ServerSubmitOrderResponse_Accepted
	Details isServerSubmitOrderResponse_Details `protobuf_oneof:"details"`
}

func (x *ServerSubmitOrderResponse) Reset() {
	*x = ServerSubmitOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auctioneer_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerSubmitOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerSubmitOrderResponse) ProtoMessage() {}

func (x *ServerSubmitOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_auctioneer_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerSubmitOrderResponse.ProtoReflect.Descriptor instead.
func (*ServerSubmitOrderResponse) Descriptor() ([]byte, []int) {
	return file_auctioneer_proto_rawDescGZIP(), []int{5}
}

func (m *ServerSubmitOrderResponse) GetDetails() isServerSubmitOrderResponse_Details {
	if m != nil {
		return m.Details
	}
	return nil
}

func (x *ServerSubmitOrderResponse) GetInvalidOrder() *InvalidOrder {
	if x, ok := x.GetDetails().(*ServerSubmitOrderResponse_InvalidOrder); ok {
		return x.InvalidOrder
	}
	return nil
}

func (x *ServerSubmitOrderResponse) GetAccepted() bool {
	if x, ok := x.GetDetails().(*ServerSubmitOrderResponse_Accepted); ok {
		return x.Accepted
	}
	return false
}

type isServerSubmitOrderResponse_Details interface {
	isServerSubmitOrderResponse_Details()
}

type ServerSubmitOrderResponse_InvalidOrder struct {
	//
	//Order failed with the given reason.
	InvalidOrder *InvalidOrder `protobuf:"bytes,1,opt,name=invalid_order,json=invalidOrder,proto3,oneof"`
}

type ServerSubmitOrderResponse_Accepted struct {
	//
	//Order was accepted.
	Accepted bool `protobuf:"varint,2,opt,name=accepted,proto3,oneof"`
}

func (*ServerSubmitOrderResponse_InvalidOrder) isServerSubmitOrderResponse_Details() {}

func (*ServerSubmitOrderResponse_Accepted) isServerSubmitOrderResponse_Details() {}

type ServerCancelOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//The preimage to the order's unique nonce.
	OrderNoncePreimage []byte `protobuf:"bytes,1,opt,name=order_nonce_preimage,json=orderNoncePreimage,proto3" json:"order_nonce_preimage,omitempty"`
}

func (x *ServerCancelOrderRequest) Reset() {
	*x = ServerCancelOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auctioneer_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerCancelOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerCancelOrderRequest) ProtoMessage() {}

func (x *ServerCancelOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auctioneer_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerCancelOrderRequest.ProtoReflect.Descriptor instead.
func (*ServerCancelOrderRequest) Descriptor() ([]byte, []int) {
	return file_auctioneer_proto_rawDescGZIP(), []int{6}
}

func (x *ServerCancelOrderRequest) GetOrderNoncePreimage() []byte {
	if x != nil {
		return x.OrderNoncePreimage
	}
	return nil
}

type ServerCancelOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ServerCancelOrderResponse) Reset() {
	*x = ServerCancelOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auctioneer_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerCancelOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerCancelOrderResponse) ProtoMessage() {}

func (x *ServerCancelOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_auctioneer_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerCancelOrderResponse.ProtoReflect.Descriptor instead.
func (*ServerCancelOrderResponse) Descriptor() ([]byte, []int) {
	return file_auctioneer_proto_rawDescGZIP(), []int{7}
}

type ClientAuctionMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Msg:
	//	*ClientAuctionMessage_Commit
	//	*ClientAuctionMessage_Subscribe
	//	*ClientAuctionMessage_Accept
	//	*ClientAuctionMessage_Reject
	//	*ClientAuctionMessage_Sign
	//	*ClientAuctionMessage_Recover
	Msg isClientAuctionMessage_Msg `protobuf_oneof:"msg"`
}

func (x *ClientAuctionMessage) Reset() {
	*x = ClientAuctionMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auctioneer_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientAuctionMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientAuctionMessage) ProtoMessage() {}

func (x *ClientAuctionMessage) ProtoReflect() protoreflect.Message {
	mi := &file_auctioneer_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientAuctionMessage.ProtoReflect.Descriptor instead.
func (*ClientAuctionMessage) Descriptor() ([]byte, []int) {
	return file_auctioneer_proto_rawDescGZIP(), []int{8}
}

func (m *ClientAuctionMessage) GetMsg() isClientAuctionMessage_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (x *ClientAuctionMessage) GetCommit() *AccountCommitment {
	if x, ok := x.GetMsg().(*ClientAuctionMessage_Commit); ok {
		return x.Commit
	}
	return nil
}

func (x *ClientAuctionMessage) GetSubscribe() *AccountSubscription {
	if x, ok := x.GetMsg().(*ClientAuctionMessage_Subscribe); ok {
		return x.Subscribe
	}
	return nil
}

func (x *ClientAuctionMessage) GetAccept() *OrderMatchAccept {
	if x, ok := x.GetMsg().(*ClientAuctionMessage_Accept); ok {
		return x.Accept
	}
	return nil
}

func (x *ClientAuctionMessage) GetReject() *OrderMatchReject {
	if x, ok := x.GetMsg().(*ClientAuctionMessage_Reject); ok {
		return x.Reject
	}
	return nil
}

func (x *ClientAuctionMessage) GetSign() *OrderMatchSign {
	if x, ok := x.GetMsg().(*ClientAuctionMessage_Sign); ok {
		return x.Sign
	}
	return nil
}

func (x *ClientAuctionMessage) GetRecover() *AccountRecovery {
	if x, ok := x.GetMsg().(*ClientAuctionMessage_Recover); ok {
		return x.Recover
	}
	return nil
}

type isClientAuctionMessage_Msg interface {
	isClientAuctionMessage_Msg()
}

type ClientAuctionMessage_Commit struct {
	//
	//Signal the intent to receive updates about a certain account and start
	//by sending the commitment part of the authentication handshake. This is
	//step 1 of the 3-way handshake.
	Commit *AccountCommitment `protobuf:"bytes,1,opt,name=commit,proto3,oneof"`
}

type ClientAuctionMessage_Subscribe struct {
	//
	//Subscribe to update and interactive order execution events for account
	//given and all its orders. Contains the final signature and is step 3 of
	//the 3-way authentication handshake.
	Subscribe *AccountSubscription `protobuf:"bytes,2,opt,name=subscribe,proto3,oneof"`
}

type ClientAuctionMessage_Accept struct {
	//
	//Accept the orders to be matched.
	Accept *OrderMatchAccept `protobuf:"bytes,3,opt,name=accept,proto3,oneof"`
}

type ClientAuctionMessage_Reject struct {
	//
	//Reject a whole batch.
	Reject *OrderMatchReject `protobuf:"bytes,4,opt,name=reject,proto3,oneof"`
}

type ClientAuctionMessage_Sign struct {
	//
	//The channel funding negotiations with the matched peer were successful
	//and the inputs to spend from the accounts are now signed.
	Sign *OrderMatchSign `protobuf:"bytes,5,opt,name=sign,proto3,oneof"`
}

type ClientAuctionMessage_Recover struct {
	//
	//The trader has lost its database and is trying to recover their
	//accounts. This message can be sent after the successful completion of
	//the 3-way authentication handshake where it will be established if the
	//account exists on the auctioneer's side. This message must only be sent
	//if the auctioneer knows of the account, otherwise it will regard it as a
	//critical error and terminate the connection.
	Recover *AccountRecovery `protobuf:"bytes,6,opt,name=recover,proto3,oneof"`
}

func (*ClientAuctionMessage_Commit) isClientAuctionMessage_Msg() {}

func (*ClientAuctionMessage_Subscribe) isClientAuctionMessage_Msg() {}

func (*ClientAuctionMessage_Accept) isClientAuctionMessage_Msg() {}

func (*ClientAuctionMessage_Reject) isClientAuctionMessage_Msg() {}

func (*ClientAuctionMessage_Sign) isClientAuctionMessage_Msg() {}

func (*ClientAuctionMessage_Recover) isClientAuctionMessage_Msg() {}

type AccountCommitment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//The SHA256 hash of the trader's account key and a 32 byte random nonce.
	//commit_hash = SHA256(accountPubKey || nonce)
	CommitHash []byte `protobuf:"bytes,1,opt,name=commit_hash,json=commitHash,proto3" json:"commit_hash,omitempty"`
	//
	//The batch verification protocol version the client is using. Clients that
	//don't use the latest version will be declined to connect and participate in
	//an auction. The user should then be informed that a software update is
	//required.
	BatchVersion uint32 `protobuf:"varint,2,opt,name=batch_version,json=batchVersion,proto3" json:"batch_version,omitempty"`
}

func (x *AccountCommitment) Reset() {
	*x = AccountCommitment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auctioneer_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountCommitment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountCommitment) ProtoMessage() {}

func (x *AccountCommitment) ProtoReflect() protoreflect.Message {
	mi := &file_auctioneer_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountCommitment.ProtoReflect.Descriptor instead.
func (*AccountCommitment) Descriptor() ([]byte, []int) {
	return file_auctioneer_proto_rawDescGZIP(), []int{9}
}

func (x *AccountCommitment) GetCommitHash() []byte {
	if x != nil {
		return x.CommitHash
	}
	return nil
}

func (x *AccountCommitment) GetBatchVersion() uint32 {
	if x != nil {
		return x.BatchVersion
	}
	return 0
}

type AccountSubscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//The trader's account key of the account to subscribe to.
	TraderKey []byte `protobuf:"bytes,1,opt,name=trader_key,json=traderKey,proto3" json:"trader_key,omitempty"`
	//
	//The random 32 byte nonce the trader used to create the commitment hash.
	CommitNonce []byte `protobuf:"bytes,2,opt,name=commit_nonce,json=commitNonce,proto3" json:"commit_nonce,omitempty"`
	//
	//The signature over the auth_hash which is the hash of the commitment and
	//challenge. The signature is created with the trader's account key they
	//committed to.
	//auth_hash = SHA256(SHA256(accountPubKey || nonce) || challenge)
	AuthSig []byte `protobuf:"bytes,3,opt,name=auth_sig,json=authSig,proto3" json:"auth_sig,omitempty"`
}

func (x *AccountSubscription) Reset() {
	*x = AccountSubscription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auctioneer_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountSubscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountSubscription) ProtoMessage() {}

func (x *AccountSubscription) ProtoReflect() protoreflect.Message {
	mi := &file_auctioneer_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountSubscription.ProtoReflect.Descriptor instead.
func (*AccountSubscription) Descriptor() ([]byte, []int) {
	return file_auctioneer_proto_rawDescGZIP(), []int{10}
}

func (x *AccountSubscription) GetTraderKey() []byte {
	if x != nil {
		return x.TraderKey
	}
	return nil
}

func (x *AccountSubscription) GetCommitNonce() []byte {
	if x != nil {
		return x.CommitNonce
	}
	return nil
}

func (x *AccountSubscription) GetAuthSig() []byte {
	if x != nil {
		return x.AuthSig
	}
	return nil
}

type OrderMatchAccept struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//The batch ID this acceptance message refers to. Must be set to avoid out-of-
	//order responses from disrupting the batching process.
	BatchId []byte `protobuf:"bytes,1,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
}

func (x *OrderMatchAccept) Reset() {
	*x = OrderMatchAccept{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auctioneer_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderMatchAccept) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderMatchAccept) ProtoMessage() {}

func (x *OrderMatchAccept) ProtoReflect() protoreflect.Message {
	mi := &file_auctioneer_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderMatchAccept.ProtoReflect.Descriptor instead.
func (*OrderMatchAccept) Descriptor() ([]byte, []int) {
	return file_auctioneer_proto_rawDescGZIP(), []int{11}
}

func (x *OrderMatchAccept) GetBatchId() []byte {
	if x != nil {
		return x.BatchId
	}
	return nil
}

type OrderMatchReject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//The ID of the batch to reject.
	BatchId []byte `protobuf:"bytes,1,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	//
	//The reason/error string for the rejection.
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	//
	//The reason as a code.
	ReasonCode OrderMatchReject_RejectReason `protobuf:"varint,3,opt,name=reason_code,json=reasonCode,proto3,enum=poolrpc.OrderMatchReject_RejectReason" json:"reason_code,omitempty"`
	//
	//The map of order nonces the trader was matched with but doesn't accept. The
	//map contains the _other_ trader's order nonces and the reason for rejecting
	//them. This can be a subset of the whole list of orders presented as matches
	//if the trader only wants to reject some of them. This map is only
	//considered by the auctioneer if the main reason_code is set to
	//PARTIAL_REJECT. Otherwise it is assumed that the whole batch was faulty for
	//some reason and that the trader rejects all orders contained. The auctioneer
	//will only accept a certain number of these partial rejects before a trader's
	//account is removed completely from the current batch. Abusing this
	//functionality can also lead to a ban of the trader.
	//
	//The order nonces are hex encoded strings because the protobuf map doesn't
	//allow raw bytes to be the map key type.
	RejectedOrders map[string]*OrderReject `protobuf:"bytes,4,rep,name=rejected_orders,json=rejectedOrders,proto3" json:"rejected_orders,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *OrderMatchReject) Reset() {
	*x = OrderMatchReject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auctioneer_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderMatchReject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderMatchReject) ProtoMessage() {}

func (x *OrderMatchReject) ProtoReflect() protoreflect.Message {
	mi := &file_auctioneer_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderMatchReject.ProtoReflect.Descriptor instead.
func (*OrderMatchReject) Descriptor() ([]byte, []int) {
	return file_auctioneer_proto_rawDescGZIP(), []int{12}
}

func (x *OrderMatchReject) GetBatchId() []byte {
	if x != nil {
		return x.BatchId
	}
	return nil
}

func (x *OrderMatchReject) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *OrderMatchReject) GetReasonCode() OrderMatchReject_RejectReason {
	if x != nil {
		return x.ReasonCode
	}
	return OrderMatchReject_UNKNOWN
}

func (x *OrderMatchReject) GetRejectedOrders() map[string]*OrderReject {
	if x != nil {
		return x.RejectedOrders
	}
	return nil
}

type OrderReject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//The reason/error string for the rejection.
	Reason string `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
	//
	//The reason as a code.
	ReasonCode OrderReject_OrderRejectReason `protobuf:"varint,2,opt,name=reason_code,json=reasonCode,proto3,enum=poolrpc.OrderReject_OrderRejectReason" json:"reason_code,omitempty"`
}

func (x *OrderReject) Reset() {
	*x = OrderReject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auctioneer_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderReject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderReject) ProtoMessage() {}

func (x *OrderReject) ProtoReflect() protoreflect.Message {
	mi := &file_auctioneer_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderReject.ProtoReflect.Descriptor instead.
func (*OrderReject) Descriptor() ([]byte, []int) {
	return file_auctioneer_proto_rawDescGZIP(), []int{13}
}

func (x *OrderReject) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *OrderReject) GetReasonCode() OrderReject_OrderRejectReason {
	if x != nil {
		return x.ReasonCode
	}
	return OrderReject_DUPLICATE_PEER
}

type ChannelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identifying type of the channel.
	Type ChannelType `protobuf:"varint,1,opt,name=type,proto3,enum=poolrpc.ChannelType" json:"type,omitempty"`
	// The node's identifying public key.
	LocalNodeKey []byte `protobuf:"bytes,2,opt,name=local_node_key,json=localNodeKey,proto3" json:"local_node_key,omitempty"`
	// The remote node's identifying public key.
	RemoteNodeKey []byte `protobuf:"bytes,3,opt,name=remote_node_key,json=remoteNodeKey,proto3" json:"remote_node_key,omitempty"`
	//
	//The node's base public key used within the non-delayed pay-to-self output on
	//the commitment transaction.
	LocalPaymentBasePoint []byte `protobuf:"bytes,4,opt,name=local_payment_base_point,json=localPaymentBasePoint,proto3" json:"local_payment_base_point,omitempty"`
	//
	//RemotePaymentBasePoint is the remote node's base public key used within the
	//non-delayed pay-to-self output on the commitment transaction.
	RemotePaymentBasePoint []byte `protobuf:"bytes,5,opt,name=remote_payment_base_point,json=remotePaymentBasePoint,proto3" json:"remote_payment_base_point,omitempty"`
}

func (x *ChannelInfo) Reset() {
	*x = ChannelInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auctioneer_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelInfo) ProtoMessage() {}

func (x *ChannelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_auctioneer_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelInfo.ProtoReflect.Descriptor instead.
func (*ChannelInfo) Descriptor() ([]byte, []int) {
	return file_auctioneer_proto_rawDescGZIP(), []int{14}
}

func (x *ChannelInfo) GetType() ChannelType {
	if x != nil {
		return x.Type
	}
	return ChannelType_TWEAKLESS
}

func (x *ChannelInfo) GetLocalNodeKey() []byte {
	if x != nil {
		return x.LocalNodeKey
	}
	return nil
}

func (x *ChannelInfo) GetRemoteNodeKey() []byte {
	if x != nil {
		return x.RemoteNodeKey
	}
	return nil
}

func (x *ChannelInfo) GetLocalPaymentBasePoint() []byte {
	if x != nil {
		return x.LocalPaymentBasePoint
	}
	return nil
}

func (x *ChannelInfo) GetRemotePaymentBasePoint() []byte {
	if x != nil {
		return x.RemotePaymentBasePoint
	}
	return nil
}

type OrderMatchSign struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//The ID of the batch that the signatures are meant for.
	BatchId []byte `protobuf:"bytes,1,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	//
	//A map with the signatures to spend the accounts being spent in a batch
	//transaction. The map key corresponds to the trader's account key of the
	//account in the batch transaction. The account key/ID has to be hex encoded
	//into a string because protobuf doesn't allow bytes as a map key data type.
	//For version 1 (Taproot enabled) accounts, this merely represents a partial
	//MuSig2 signature that can be combined into a full signature by the auction
	//server by adding its own partial signature. A set of nonces will be provided
	//by the trader for each v1 account to allow finalizing the MuSig2 signing
	//session.
	AccountSigs map[string][]byte `protobuf:"bytes,2,rep,name=account_sigs,json=accountSigs,proto3" json:"account_sigs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	//
	//The information for each channel created as part of a batch that's submitted
	//to the auctioneer to ensure they can properly enforce a channel's service
	//lifetime. Entries are indexed by the string representation of a channel's
	//outpoint.
	ChannelInfos map[string]*ChannelInfo `protobuf:"bytes,3,rep,name=channel_infos,json=channelInfos,proto3" json:"channel_infos,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	//
	//A set of 66-byte nonces for each version 1 (Taproot enabled) account. The
	//nonces can be used to produce a MuSig2 partial signature to spend the
	//account using the key spend path, which is a MuSig2 combined key of the
	//auctioneer key and the trader key.
	TraderNonces map[string][]byte `protobuf:"bytes,4,rep,name=trader_nonces,json=traderNonces,proto3" json:"trader_nonces,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *OrderMatchSign) Reset() {
	*x = OrderMatchSign{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auctioneer_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderMatchSign) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderMatchSign) ProtoMessage() {}

func (x *OrderMatchSign) ProtoReflect() protoreflect.Message {
	mi := &file_auctioneer_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderMatchSign.ProtoReflect.Descriptor instead.
func (*OrderMatchSign) Descriptor() ([]byte, []int) {
	return file_auctioneer_proto_rawDescGZIP(), []int{15}
}

func (x *OrderMatchSign) GetBatchId() []byte {
	if x != nil {
		return x.BatchId
	}
	return nil
}

func (x *OrderMatchSign) GetAccountSigs() map[string][]byte {
	if x != nil {
		return x.AccountSigs
	}
	return nil
}

func (x *OrderMatchSign) GetChannelInfos() map[string]*ChannelInfo {
	if x != nil {
		return x.ChannelInfos
	}
	return nil
}

func (x *OrderMatchSign) GetTraderNonces() map[string][]byte {
	if x != nil {
		return x.TraderNonces
	}
	return nil
}

type AccountRecovery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//The trader's account key of the account to recover.
	TraderKey []byte `protobuf:"bytes,1,opt,name=trader_key,json=traderKey,proto3" json:"trader_key,omitempty"`
}

func (x *AccountRecovery) Reset() {
	*x = AccountRecovery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auctioneer_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountRecovery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountRecovery) ProtoMessage() {}

func (x *AccountRecovery) ProtoReflect() protoreflect.Message {
	mi := &file_auctioneer_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountRecovery.ProtoReflect.Descriptor instead.
func (*AccountRecovery) Descriptor() ([]byte, []int) {
	return file_auctioneer_proto_rawDescGZIP(), []int{16}
}

func (x *AccountRecovery) GetTraderKey() []byte {
	if x != nil {
		return x.TraderKey
	}
	return nil
}

type ServerAuctionMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Msg:
	//	*ServerAuctionMessage_Challenge
	//	*ServerAuctionMessage_Success
	//	*ServerAuctionMessage_Error
	//	*ServerAuctionMessage_Prepare
	//	*ServerAuctionMessage_Sign
	//	*ServerAuctionMessage_Finalize
	//	*ServerAuctionMessage_Account
	Msg isServerAuctionMessage_Msg `protobuf_oneof:"msg"`
}

func (x *ServerAuctionMessage) Reset() {
	*x = ServerAuctionMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auctioneer_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerAuctionMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerAuctionMessage) ProtoMessage() {}

func (x *ServerAuctionMessage) ProtoReflect() protoreflect.Message {
	mi := &file_auctioneer_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerAuctionMessage.ProtoReflect.Descriptor instead.
func (*ServerAuctionMessage) Descriptor() ([]byte, []int) {
	return file_auctioneer_proto_rawDescGZIP(), []int{17}
}

func (m *ServerAuctionMessage) GetMsg() isServerAuctionMessage_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (x *ServerAuctionMessage) GetChallenge() *ServerChallenge {
	if x, ok := x.GetMsg().(*ServerAuctionMessage_Challenge); ok {
		return x.Challenge
	}
	return nil
}

func (x *ServerAuctionMessage) GetSuccess() *SubscribeSuccess {
	if x, ok := x.GetMsg().(*ServerAuctionMessage_Success); ok {
		return x.Success
	}
	return nil
}

func (x *ServerAuctionMessage) GetError() *SubscribeError {
	if x, ok := x.GetMsg().(*ServerAuctionMessage_Error); ok {
		return x.Error
	}
	return nil
}

func (x *ServerAuctionMessage) GetPrepare() *OrderMatchPrepare {
	if x, ok := x.GetMsg().(*ServerAuctionMessage_Prepare); ok {
		return x.Prepare
	}
	return nil
}

func (x *ServerAuctionMessage) GetSign() *OrderMatchSignBegin {
	if x, ok := x.GetMsg().(*ServerAuctionMessage_Sign); ok {
		return x.Sign
	}
	return nil
}

func (x *ServerAuctionMessage) GetFinalize() *OrderMatchFinalize {
	if x, ok := x.GetMsg().(*ServerAuctionMessage_Finalize); ok {
		return x.Finalize
	}
	return nil
}

func (x *ServerAuctionMessage) GetAccount() *AuctionAccount {
	if x, ok := x.GetMsg().(*ServerAuctionMessage_Account); ok {
		return x.Account
	}
	return nil
}

type isServerAuctionMessage_Msg interface {
	isServerAuctionMessage_Msg()
}

type ServerAuctionMessage_Challenge struct {
	//
	//Step 2 of the 3-way authentication handshake. Contains the
	//authentication challenge. Subscriptions sent by the trader must sign
	//the message SHA256(SHA256(accountPubKey || nonce) || challenge)
	//with their account key to prove ownership of said key.
	Challenge *ServerChallenge `protobuf:"bytes,1,opt,name=challenge,proto3,oneof"`
}

type ServerAuctionMessage_Success struct {
	//
	//The trader has subscribed to account updates successfully, the 3-way
	//authentication handshake completed normally.
	Success *SubscribeSuccess `protobuf:"bytes,2,opt,name=success,proto3,oneof"`
}

type ServerAuctionMessage_Error struct {
	//
	//An error occurred during any part of the communication. The trader
	//should inspect the error code and act accordingly.
	Error *SubscribeError `protobuf:"bytes,3,opt,name=error,proto3,oneof"`
}

type ServerAuctionMessage_Prepare struct {
	//
	//The auctioneer has matched a set of orders into a batch and now
	//instructs the traders to validate the batch and prepare for order
	//execution. Because traders have the possibility of backing out of a
	//batch, multiple of these messages with the SAME batch_id can be sent.
	Prepare *OrderMatchPrepare `protobuf:"bytes,4,opt,name=prepare,proto3,oneof"`
}

type ServerAuctionMessage_Sign struct {
	//
	//This message is sent after all traders send back an OrderMatchAccept
	//method. It signals that the traders should execute their local funding
	//protocol, then send signatures for their account inputs.
	Sign *OrderMatchSignBegin `protobuf:"bytes,5,opt,name=sign,proto3,oneof"`
}

type ServerAuctionMessage_Finalize struct {
	//
	//All traders have accepted and signed the batch and the final transaction
	//was broadcast.
	Finalize *OrderMatchFinalize `protobuf:"bytes,6,opt,name=finalize,proto3,oneof"`
}

type ServerAuctionMessage_Account struct {
	//
	//The answer to a trader's request for account recovery. This message
	//contains all information that is needed to restore the account to
	//working order on the trader side.
	Account *AuctionAccount `protobuf:"bytes,7,opt,name=account,proto3,oneof"`
}

func (*ServerAuctionMessage_Challenge) isServerAuctionMessage_Msg() {}

func (*ServerAuctionMessage_Success) isServerAuctionMessage_Msg() {}

func (*ServerAuctionMessage_Error) isServerAuctionMessage_Msg() {}

func (*ServerAuctionMessage_Prepare) isServerAuctionMessage_Msg() {}

func (*ServerAuctionMessage_Sign) isServerAuctionMessage_Msg() {}

func (*ServerAuctionMessage_Finalize) isServerAuctionMessage_Msg() {}

func (*ServerAuctionMessage_Account) isServerAuctionMessage_Msg() {}

type ServerChallenge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//The unique challenge for each stream that has to be signed with the trader's
	//account key for each account subscription.
	Challenge []byte `protobuf:"bytes,1,opt,name=challenge,proto3" json:"challenge,omitempty"`
	//
	//The commit hash the challenge was created for.
	CommitHash []byte `protobuf:"bytes,2,opt,name=commit_hash,json=commitHash,proto3" json:"commit_hash,omitempty"`
}

func (x *ServerChallenge) Reset() {
	*x = ServerChallenge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auctioneer_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerChallenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerChallenge) ProtoMessage() {}

func (x *ServerChallenge) ProtoReflect() protoreflect.Message {
	mi := &file_auctioneer_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerChallenge.ProtoReflect.Descriptor instead.
func (*ServerChallenge) Descriptor() ([]byte, []int) {
	return file_auctioneer_proto_rawDescGZIP(), []int{18}
}

func (x *ServerChallenge) GetChallenge() []byte {
	if x != nil {
		return x.Challenge
	}
	return nil
}

func (x *ServerChallenge) GetCommitHash() []byte {
	if x != nil {
		return x.CommitHash
	}
	return nil
}

type SubscribeSuccess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//The trader's account key this message is referring to.
	TraderKey []byte `protobuf:"bytes,1,opt,name=trader_key,json=traderKey,proto3" json:"trader_key,omitempty"`
}

func (x *SubscribeSuccess) Reset() {
	*x = SubscribeSuccess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auctioneer_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeSuccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeSuccess) ProtoMessage() {}

func (x *SubscribeSuccess) ProtoReflect() protoreflect.Message {
	mi := &file_auctioneer_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeSuccess.ProtoReflect.Descriptor instead.
func (*SubscribeSuccess) Descriptor() ([]byte, []int) {
	return file_auctioneer_proto_rawDescGZIP(), []int{19}
}

func (x *SubscribeSuccess) GetTraderKey() []byte {
	if x != nil {
		return x.TraderKey
	}
	return nil
}

type MatchedMarket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//Maps a user's own order_nonce to the opposite order type they were matched
	//with. The order_nonce is a 32 byte hex encoded string because bytes is not
	//allowed as a map key data type in protobuf.
	MatchedOrders map[string]*MatchedOrder `protobuf:"bytes,1,rep,name=matched_orders,json=matchedOrders,proto3" json:"matched_orders,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	//
	//The uniform clearing price rate in parts per billion that was used for this
	//batch.
	ClearingPriceRate uint32 `protobuf:"varint,2,opt,name=clearing_price_rate,json=clearingPriceRate,proto3" json:"clearing_price_rate,omitempty"`
}

func (x *MatchedMarket) Reset() {
	*x = MatchedMarket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auctioneer_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchedMarket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchedMarket) ProtoMessage() {}

func (x *MatchedMarket) ProtoReflect() protoreflect.Message {
	mi := &file_auctioneer_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchedMarket.ProtoReflect.Descriptor instead.
func (*MatchedMarket) Descriptor() ([]byte, []int) {
	return file_auctioneer_proto_rawDescGZIP(), []int{20}
}

func (x *MatchedMarket) GetMatchedOrders() map[string]*MatchedOrder {
	if x != nil {
		return x.MatchedOrders
	}
	return nil
}

func (x *MatchedMarket) GetClearingPriceRate() uint32 {
	if x != nil {
		return x.ClearingPriceRate
	}
	return 0
}

type OrderMatchPrepare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//Deprecated, use matched_markets.
	//
	// Deprecated: Do not use.
	MatchedOrders map[string]*MatchedOrder `protobuf:"bytes,1,rep,name=matched_orders,json=matchedOrders,proto3" json:"matched_orders,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	//
	//Deprecated, use matched_markets.
	//
	// Deprecated: Do not use.
	ClearingPriceRate uint32 `protobuf:"varint,2,opt,name=clearing_price_rate,json=clearingPriceRate,proto3" json:"clearing_price_rate,omitempty"`
	//
	//A list of the user's own accounts that are being spent by the matched
	//orders. The list contains the differences that would be applied by the
	//server when executing the orders.
	ChargedAccounts []*AccountDiff `protobuf:"bytes,3,rep,name=charged_accounts,json=chargedAccounts,proto3" json:"charged_accounts,omitempty"`
	//
	//The fee parameters used to calculate the execution fees.
	ExecutionFee *ExecutionFee `protobuf:"bytes,4,opt,name=execution_fee,json=executionFee,proto3" json:"execution_fee,omitempty"`
	//
	//The batch transaction with all non-witness data.
	BatchTransaction []byte `protobuf:"bytes,5,opt,name=batch_transaction,json=batchTransaction,proto3" json:"batch_transaction,omitempty"`
	//
	//Fee rate of the batch transaction, expressed in satoshis per 1000 weight
	//units (sat/kW).
	FeeRateSatPerKw uint64 `protobuf:"varint,6,opt,name=fee_rate_sat_per_kw,json=feeRateSatPerKw,proto3" json:"fee_rate_sat_per_kw,omitempty"`
	//
	//Fee rebate in satoshis, offered if another batch participant wants to pay
	//more fees for a faster confirmation.
	FeeRebateSat uint64 `protobuf:"varint,7,opt,name=fee_rebate_sat,json=feeRebateSat,proto3" json:"fee_rebate_sat,omitempty"`
	//
	//The 32 byte unique identifier of this batch.
	BatchId []byte `protobuf:"bytes,8,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	//
	//The batch verification protocol version the server is using. Clients that
	//don't support this version MUST return an `OrderMatchAccept` message with
	//an empty list of orders so the batch can continue. The user should then be
	//informed that a software update is required.
	BatchVersion uint32 `protobuf:"varint,9,opt,name=batch_version,json=batchVersion,proto3" json:"batch_version,omitempty"`
	//
	//Maps the distinct lease duration markets to the orders that were matched
	//within and the discovered market clearing price.
	MatchedMarkets map[uint32]*MatchedMarket `protobuf:"bytes,10,rep,name=matched_markets,json=matchedMarkets,proto3" json:"matched_markets,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	//
	//The earliest absolute height in the chain in which the batch transaction can
	//be found within. This will be used by traders to base off their absolute
	//channel lease maturity height.
	BatchHeightHint uint32 `protobuf:"varint,11,opt,name=batch_height_hint,json=batchHeightHint,proto3" json:"batch_height_hint,omitempty"`
}

func (x *OrderMatchPrepare) Reset() {
	*x = OrderMatchPrepare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auctioneer_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderMatchPrepare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderMatchPrepare) ProtoMessage() {}

func (x *OrderMatchPrepare) ProtoReflect() protoreflect.Message {
	mi := &file_auctioneer_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderMatchPrepare.ProtoReflect.Descriptor instead.
func (*OrderMatchPrepare) Descriptor() ([]byte, []int) {
	return file_auctioneer_proto_rawDescGZIP(), []int{21}
}

// Deprecated: Do not use.
func (x *OrderMatchPrepare) GetMatchedOrders() map[string]*MatchedOrder {
	if x != nil {
		return x.MatchedOrders
	}
	return nil
}

// Deprecated: Do not use.
func (x *OrderMatchPrepare) GetClearingPriceRate() uint32 {
	if x != nil {
		return x.ClearingPriceRate
	}
	return 0
}

func (x *OrderMatchPrepare) GetChargedAccounts() []*AccountDiff {
	if x != nil {
		return x.ChargedAccounts
	}
	return nil
}

func (x *OrderMatchPrepare) GetExecutionFee() *ExecutionFee {
	if x != nil {
		return x.ExecutionFee
	}
	return nil
}

func (x *OrderMatchPrepare) GetBatchTransaction() []byte {
	if x != nil {
		return x.BatchTransaction
	}
	return nil
}

func (x *OrderMatchPrepare) GetFeeRateSatPerKw() uint64 {
	if x != nil {
		return x.FeeRateSatPerKw
	}
	return 0
}

func (x *OrderMatchPrepare) GetFeeRebateSat() uint64 {
	if x != nil {
		return x.FeeRebateSat
	}
	return 0
}

func (x *OrderMatchPrepare) GetBatchId() []byte {
	if x != nil {
		return x.BatchId
	}
	return nil
}

func (x *OrderMatchPrepare) GetBatchVersion() uint32 {
	if x != nil {
		return x.BatchVersion
	}
	return 0
}

func (x *OrderMatchPrepare) GetMatchedMarkets() map[uint32]*MatchedMarket {
	if x != nil {
		return x.MatchedMarkets
	}
	return nil
}

func (x *OrderMatchPrepare) GetBatchHeightHint() uint32 {
	if x != nil {
		return x.BatchHeightHint
	}
	return 0
}

type TxOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//The value of the transaction output in satoshis.
	Value uint64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	//
	//The public key script of the output.
	PkScript []byte `protobuf:"bytes,2,opt,name=pk_script,json=pkScript,proto3" json:"pk_script,omitempty"`
}

func (x *TxOut) Reset() {
	*x = TxOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auctioneer_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxOut) ProtoMessage() {}

func (x *TxOut) ProtoReflect() protoreflect.Message {
	mi := &file_auctioneer_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxOut.ProtoReflect.Descriptor instead.
func (*TxOut) Descriptor() ([]byte, []int) {
	return file_auctioneer_proto_rawDescGZIP(), []int{22}
}

func (x *TxOut) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *TxOut) GetPkScript() []byte {
	if x != nil {
		return x.PkScript
	}
	return nil
}

type OrderMatchSignBegin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//The 32 byte unique identifier of this batch.
	BatchId []byte `protobuf:"bytes,1,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	//
	//A set of 66-byte nonces for each version 1 (Taproot enabled) account. The
	//nonces can be used to produce a MuSig2 partial signature to spend the
	//account using the key spend path, which is a MuSig2 combined key of the
	//auctioneer key and the trader key.
	ServerNonces map[string][]byte `protobuf:"bytes,2,rep,name=server_nonces,json=serverNonces,proto3" json:"server_nonces,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	//
	//The full list of UTXO information for each of the inputs being spent. This
	//is required when spending one or more Taproot enabled (account version 1)
	//outputs.
	PrevOutputs []*TxOut `protobuf:"bytes,3,rep,name=prev_outputs,json=prevOutputs,proto3" json:"prev_outputs,omitempty"`
}

func (x *OrderMatchSignBegin) Reset() {
	*x = OrderMatchSignBegin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auctioneer_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderMatchSignBegin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderMatchSignBegin) ProtoMessage() {}

func (x *OrderMatchSignBegin) ProtoReflect() protoreflect.Message {
	mi := &file_auctioneer_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderMatchSignBegin.ProtoReflect.Descriptor instead.
func (*OrderMatchSignBegin) Descriptor() ([]byte, []int) {
	return file_auctioneer_proto_rawDescGZIP(), []int{23}
}

func (x *OrderMatchSignBegin) GetBatchId() []byte {
	if x != nil {
		return x.BatchId
	}
	return nil
}

func (x *OrderMatchSignBegin) GetServerNonces() map[string][]byte {
	if x != nil {
		return x.ServerNonces
	}
	return nil
}

func (x *OrderMatchSignBegin) GetPrevOutputs() []*TxOut {
	if x != nil {
		return x.PrevOutputs
	}
	return nil
}

type OrderMatchFinalize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//The unique identifier of the finalized batch.
	BatchId []byte `protobuf:"bytes,1,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	//
	//The final transaction ID of the published batch transaction.
	BatchTxid []byte `protobuf:"bytes,2,opt,name=batch_txid,json=batchTxid,proto3" json:"batch_txid,omitempty"`
}

func (x *OrderMatchFinalize) Reset() {
	*x = OrderMatchFinalize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auctioneer_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderMatchFinalize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderMatchFinalize) ProtoMessage() {}

func (x *OrderMatchFinalize) ProtoReflect() protoreflect.Message {
	mi := &file_auctioneer_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderMatchFinalize.ProtoReflect.Descriptor instead.
func (*OrderMatchFinalize) Descriptor() ([]byte, []int) {
	return file_auctioneer_proto_rawDescGZIP(), []int{24}
}

func (x *OrderMatchFinalize) GetBatchId() []byte {
	if x != nil {
		return x.BatchId
	}
	return nil
}

func (x *OrderMatchFinalize) GetBatchTxid() []byte {
	if x != nil {
		return x.BatchTxid
	}
	return nil
}

type SubscribeError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//The string representation of the subscription error.
	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	//
	//The error code of the subscription error.
	ErrorCode SubscribeError_Error `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3,enum=poolrpc.SubscribeError_Error" json:"error_code,omitempty"`
	//
	//The trader's account key this error is referring to. This is not set if
	//the error code is SERVER_SHUTDOWN as that error is only sent once per
	//connection and not per individual subscription.
	TraderKey []byte `protobuf:"bytes,3,opt,name=trader_key,json=traderKey,proto3" json:"trader_key,omitempty"`
	//
	//The auctioneer's partial account information as it was stored when creating
	//the reservation. This is only set if the error code is
	//INCOMPLETE_ACCOUNT_RESERVATION. Only the fields value, expiry, trader_key,
	//auctioneer_key, batch_key and height_hint will be set in that
	//case.
	AccountReservation *AuctionAccount `protobuf:"bytes,4,opt,name=account_reservation,json=accountReservation,proto3" json:"account_reservation,omitempty"`
}

func (x *SubscribeError) Reset() {
	*x = SubscribeError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auctioneer_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeError) ProtoMessage() {}

func (x *SubscribeError) ProtoReflect() protoreflect.Message {
	mi := &file_auctioneer_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeError.ProtoReflect.Descriptor instead.
func (*SubscribeError) Descriptor() ([]byte, []int) {
	return file_auctioneer_proto_rawDescGZIP(), []int{25}
}

func (x *SubscribeError) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *SubscribeError) GetErrorCode() SubscribeError_Error {
	if x != nil {
		return x.ErrorCode
	}
	return SubscribeError_UNKNOWN
}

func (x *SubscribeError) GetTraderKey() []byte {
	if x != nil {
		return x.TraderKey
	}
	return nil
}

func (x *SubscribeError) GetAccountReservation() *AuctionAccount {
	if x != nil {
		return x.AccountReservation
	}
	return nil
}

type AuctionAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//The value of the account in satoshis. Must match the amount of the
	//account_point output.
	Value uint64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	//
	//The block height at which the account should expire.
	Expiry uint32 `protobuf:"varint,2,opt,name=expiry,proto3" json:"expiry,omitempty"`
	//
	//The trader's account key.
	TraderKey []byte `protobuf:"bytes,3,opt,name=trader_key,json=traderKey,proto3" json:"trader_key,omitempty"`
	//
	//The long term auctioneer's account key.
	AuctioneerKey []byte `protobuf:"bytes,4,opt,name=auctioneer_key,json=auctioneerKey,proto3" json:"auctioneer_key,omitempty"`
	//
	//The current batch key used to create the account output.
	BatchKey []byte `protobuf:"bytes,5,opt,name=batch_key,json=batchKey,proto3" json:"batch_key,omitempty"`
	//
	//The current state of the account as the auctioneer sees it.
	State AuctionAccountState `protobuf:"varint,6,opt,name=state,proto3,enum=poolrpc.AuctionAccountState" json:"state,omitempty"`
	//
	//The block height of the last change to the account's output. Can be used to
	//scan the chain for the output's spend state more efficiently.
	HeightHint uint32 `protobuf:"varint,7,opt,name=height_hint,json=heightHint,proto3" json:"height_hint,omitempty"`
	//
	//Transaction output of the account. Depending on the state of the account,
	//this output might have been spent.
	Outpoint *OutPoint `protobuf:"bytes,8,opt,name=outpoint,proto3" json:"outpoint,omitempty"`
	//
	//The latest transaction of an account. This is only known by the auctioneer
	//after the account has met its initial funding confirmation.
	LatestTx []byte `protobuf:"bytes,9,opt,name=latest_tx,json=latestTx,proto3" json:"latest_tx,omitempty"`
	//
	//The account version. Will be set to 0 for legacy (non-taproot) accounts.
	Version uint32 `protobuf:"varint,10,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *AuctionAccount) Reset() {
	*x = AuctionAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auctioneer_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuctionAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuctionAccount) ProtoMessage() {}

func (x *AuctionAccount) ProtoReflect() protoreflect.Message {
	mi := &file_auctioneer_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuctionAccount.ProtoReflect.Descriptor instead.
func (*AuctionAccount) Descriptor() ([]byte, []int) {
	return file_auctioneer_proto_rawDescGZIP(), []int{26}
}

func (x *AuctionAccount) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *AuctionAccount) GetExpiry() uint32 {
	if x != nil {
		return x.Expiry
	}
	return 0
}

func (x *AuctionAccount) GetTraderKey() []byte {
	if x != nil {
		return x.TraderKey
	}
	return nil
}

func (x *AuctionAccount) GetAuctioneerKey() []byte {
	if x != nil {
		return x.AuctioneerKey
	}
	return nil
}

func (x *AuctionAccount) GetBatchKey() []byte {
	if x != nil {
		return x.BatchKey
	}
	return nil
}

func (x *AuctionAccount) GetState() AuctionAccountState {
	if x != nil {
		return x.State
	}
	return AuctionAccountState_STATE_PENDING_OPEN
}

func (x *AuctionAccount) GetHeightHint() uint32 {
	if x != nil {
		return x.HeightHint
	}
	return 0
}

func (x *AuctionAccount) GetOutpoint() *OutPoint {
	if x != nil {
		return x.Outpoint
	}
	return nil
}

func (x *AuctionAccount) GetLatestTx() []byte {
	if x != nil {
		return x.LatestTx
	}
	return nil
}

func (x *AuctionAccount) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type MatchedOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//The bids the trader's own order was matched against. This list is empty if
	//the trader's order was a bid order itself.
	MatchedBids []*MatchedBid `protobuf:"bytes,1,rep,name=matched_bids,json=matchedBids,proto3" json:"matched_bids,omitempty"`
	//
	//The asks the trader's own order was matched against. This list is empty if
	//the trader's order was an ask order itself.
	MatchedAsks []*MatchedAsk `protobuf:"bytes,2,rep,name=matched_asks,json=matchedAsks,proto3" json:"matched_asks,omitempty"`
}

func (x *MatchedOrder) Reset() {
	*x = MatchedOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auctioneer_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchedOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchedOrder) ProtoMessage() {}

func (x *MatchedOrder) ProtoReflect() protoreflect.Message {
	mi := &file_auctioneer_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchedOrder.ProtoReflect.Descriptor instead.
func (*MatchedOrder) Descriptor() ([]byte, []int) {
	return file_auctioneer_proto_rawDescGZIP(), []int{27}
}

func (x *MatchedOrder) GetMatchedBids() []*MatchedBid {
	if x != nil {
		return x.MatchedBids
	}
	return nil
}

func (x *MatchedOrder) GetMatchedAsks() []*MatchedAsk {
	if x != nil {
		return x.MatchedAsks
	}
	return nil
}

type MatchedAsk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//The ask order that was matched against.
	Ask *ServerAsk `protobuf:"bytes,1,opt,name=ask,proto3" json:"ask,omitempty"`
	//
	//The number of units that were filled from/by this matched order.
	UnitsFilled uint32 `protobuf:"varint,2,opt,name=units_filled,json=unitsFilled,proto3" json:"units_filled,omitempty"`
}

func (x *MatchedAsk) Reset() {
	*x = MatchedAsk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auctioneer_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchedAsk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchedAsk) ProtoMessage() {}

func (x *MatchedAsk) ProtoReflect() protoreflect.Message {
	mi := &file_auctioneer_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchedAsk.ProtoReflect.Descriptor instead.
func (*MatchedAsk) Descriptor() ([]byte, []int) {
	return file_auctioneer_proto_rawDescGZIP(), []int{28}
}

func (x *MatchedAsk) GetAsk() *ServerAsk {
	if x != nil {
		return x.Ask
	}
	return nil
}

func (x *MatchedAsk) GetUnitsFilled() uint32 {
	if x != nil {
		return x.UnitsFilled
	}
	return 0
}

type MatchedBid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//The ask order that was matched against.
	Bid *ServerBid `protobuf:"bytes,1,opt,name=bid,proto3" json:"bid,omitempty"`
	//
	//The number of units that were filled from/by this matched order.
	UnitsFilled uint32 `protobuf:"varint,2,opt,name=units_filled,json=unitsFilled,proto3" json:"units_filled,omitempty"`
}

func (x *MatchedBid) Reset() {
	*x = MatchedBid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auctioneer_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchedBid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchedBid) ProtoMessage() {}

func (x *MatchedBid) ProtoReflect() protoreflect.Message {
	mi := &file_auctioneer_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchedBid.ProtoReflect.Descriptor instead.
func (*MatchedBid) Descriptor() ([]byte, []int) {
	return file_auctioneer_proto_rawDescGZIP(), []int{29}
}

func (x *MatchedBid) GetBid() *ServerBid {
	if x != nil {
		return x.Bid
	}
	return nil
}

func (x *MatchedBid) GetUnitsFilled() uint32 {
	if x != nil {
		return x.UnitsFilled
	}
	return 0
}

type AccountDiff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//The final balance of the account after the executed batch.
	EndingBalance uint64 `protobuf:"varint,1,opt,name=ending_balance,json=endingBalance,proto3" json:"ending_balance,omitempty"`
	//
	//Depending on the amount of the final balance of the account, the remainder
	//is either sent to a new on-chain output, extended off-chain or fully
	//consumed by the batch and its fees.
	EndingState AccountDiff_AccountState `protobuf:"varint,2,opt,name=ending_state,json=endingState,proto3,enum=poolrpc.AccountDiff_AccountState" json:"ending_state,omitempty"`
	//
	//If the account was re-created on-chain then the new account's index in the
	//transaction is set here. If the account was fully spent or the remainder was
	//extended off-chain then no new account outpoint is created and -1 is
	//returned here.
	OutpointIndex int32 `protobuf:"varint,3,opt,name=outpoint_index,json=outpointIndex,proto3" json:"outpoint_index,omitempty"`
	//
	//The trader's account key this diff is referring to.
	TraderKey []byte `protobuf:"bytes,4,opt,name=trader_key,json=traderKey,proto3" json:"trader_key,omitempty"`
	//
	//The new account expiry height used to verify the batch. If the batch is
	//successfully executed the account must update its expiry height to this
	//value.
	NewExpiry uint32 `protobuf:"varint,5,opt,name=new_expiry,json=newExpiry,proto3" json:"new_expiry,omitempty"`
	//
	//The new account version used to verify the batch. If this is non-zero, it
	//means the account was automatically upgraded to the given version during the
	//batch execution.
	NewVersion uint32 `protobuf:"varint,6,opt,name=new_version,json=newVersion,proto3" json:"new_version,omitempty"`
}

func (x *AccountDiff) Reset() {
	*x = AccountDiff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auctioneer_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountDiff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountDiff) ProtoMessage() {}

func (x *AccountDiff) ProtoReflect() protoreflect.Message {
	mi := &file_auctioneer_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountDiff.ProtoReflect.Descriptor instead.
func (*AccountDiff) Descriptor() ([]byte, []int) {
	return file_auctioneer_proto_rawDescGZIP(), []int{30}
}

func (x *AccountDiff) GetEndingBalance() uint64 {
	if x != nil {
		return x.EndingBalance
	}
	return 0
}

func (x *AccountDiff) GetEndingState() AccountDiff_AccountState {
	if x != nil {
		return x.EndingState
	}
	return AccountDiff_OUTPUT_RECREATED
}

func (x *AccountDiff) GetOutpointIndex() int32 {
	if x != nil {
		return x.OutpointIndex
	}
	return 0
}

func (x *AccountDiff) GetTraderKey() []byte {
	if x != nil {
		return x.TraderKey
	}
	return nil
}

func (x *AccountDiff) GetNewExpiry() uint32 {
	if x != nil {
		return x.NewExpiry
	}
	return 0
}

func (x *AccountDiff) GetNewVersion() uint32 {
	if x != nil {
		return x.NewVersion
	}
	return 0
}

type ServerOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//The trader's account key of the account to use for the order.
	TraderKey []byte `protobuf:"bytes,1,opt,name=trader_key,json=traderKey,proto3" json:"trader_key,omitempty"`
	//
	//Fixed order rate in parts per billion.
	RateFixed uint32 `protobuf:"varint,2,opt,name=rate_fixed,json=rateFixed,proto3" json:"rate_fixed,omitempty"`
	//
	//Order amount in satoshis.
	Amt        uint64 `protobuf:"varint,3,opt,name=amt,proto3" json:"amt,omitempty"`
	MinChanAmt uint64 `protobuf:"varint,4,opt,name=min_chan_amt,json=minChanAmt,proto3" json:"min_chan_amt,omitempty"`
	//
	//Order nonce of 32 byte length, acts as unique order identifier.
	OrderNonce []byte `protobuf:"bytes,6,opt,name=order_nonce,json=orderNonce,proto3" json:"order_nonce,omitempty"`
	//
	//Signature of the order's digest, signed with the user's account key. The
	//signature must be fixed-size LN wire format encoded. Version 0 includes the
	//fields version, rate_fixed, amt, max_batch_fee_rate_sat_per_kw and
	//lease_duration_blocks in the order digest.
	OrderSig []byte `protobuf:"bytes,7,opt,name=order_sig,json=orderSig,proto3" json:"order_sig,omitempty"`
	//
	//The multi signature key of the node creating the order, will be used for the
	//target channel's funding TX 2-of-2 multi signature output.
	MultiSigKey []byte `protobuf:"bytes,8,opt,name=multi_sig_key,json=multiSigKey,proto3" json:"multi_sig_key,omitempty"`
	//
	//The pubkey of the node creating the order.
	NodePub []byte `protobuf:"bytes,9,opt,name=node_pub,json=nodePub,proto3" json:"node_pub,omitempty"`
	//
	//The network addresses of the node creating the order.
	NodeAddr []*NodeAddress `protobuf:"bytes,10,rep,name=node_addr,json=nodeAddr,proto3" json:"node_addr,omitempty"`
	//
	//The type of the channel that should be opened.
	ChannelType OrderChannelType `protobuf:"varint,12,opt,name=channel_type,json=channelType,proto3,enum=poolrpc.OrderChannelType" json:"channel_type,omitempty"`
	//
	//Maximum fee rate the trader is willing to pay for the batch transaction,
	//expressed in satoshis per 1000 weight units (sat/kW).
	MaxBatchFeeRateSatPerKw uint64 `protobuf:"varint,13,opt,name=max_batch_fee_rate_sat_per_kw,json=maxBatchFeeRateSatPerKw,proto3" json:"max_batch_fee_rate_sat_per_kw,omitempty"`
	// List of nodes that will be allowed to match with our order. Incompatible
	// with the `not_allowed_node_ids` field.
	AllowedNodeIds [][]byte `protobuf:"bytes,14,rep,name=allowed_node_ids,json=allowedNodeIds,proto3" json:"allowed_node_ids,omitempty"`
	// List of nodes that won't be allowed to match with our order. Incompatible
	// with the `allowed_node_ids` field.
	NotAllowedNodeIds [][]byte `protobuf:"bytes,15,rep,name=not_allowed_node_ids,json=notAllowedNodeIds,proto3" json:"not_allowed_node_ids,omitempty"`
}

func (x *ServerOrder) Reset() {
	*x = ServerOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auctioneer_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerOrder) ProtoMessage() {}

func (x *ServerOrder) ProtoReflect() protoreflect.Message {
	mi := &file_auctioneer_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerOrder.ProtoReflect.Descriptor instead.
func (*ServerOrder) Descriptor() ([]byte, []int) {
	return file_auctioneer_proto_rawDescGZIP(), []int{31}
}

func (x *ServerOrder) GetTraderKey() []byte {
	if x != nil {
		return x.TraderKey
	}
	return nil
}

func (x *ServerOrder) GetRateFixed() uint32 {
	if x != nil {
		return x.RateFixed
	}
	return 0
}

func (x *ServerOrder) GetAmt() uint64 {
	if x != nil {
		return x.Amt
	}
	return 0
}

func (x *ServerOrder) GetMinChanAmt() uint64 {
	if x != nil {
		return x.MinChanAmt
	}
	return 0
}

func (x *ServerOrder) GetOrderNonce() []byte {
	if x != nil {
		return x.OrderNonce
	}
	return nil
}

func (x *ServerOrder) GetOrderSig() []byte {
	if x != nil {
		return x.OrderSig
	}
	return nil
}

func (x *ServerOrder) GetMultiSigKey() []byte {
	if x != nil {
		return x.MultiSigKey
	}
	return nil
}

func (x *ServerOrder) GetNodePub() []byte {
	if x != nil {
		return x.NodePub
	}
	return nil
}

func (x *ServerOrder) GetNodeAddr() []*NodeAddress {
	if x != nil {
		return x.NodeAddr
	}
	return nil
}

func (x *ServerOrder) GetChannelType() OrderChannelType {
	if x != nil {
		return x.ChannelType
	}
	return OrderChannelType_ORDER_CHANNEL_TYPE_UNKNOWN
}

func (x *ServerOrder) GetMaxBatchFeeRateSatPerKw() uint64 {
	if x != nil {
		return x.MaxBatchFeeRateSatPerKw
	}
	return 0
}

func (x *ServerOrder) GetAllowedNodeIds() [][]byte {
	if x != nil {
		return x.AllowedNodeIds
	}
	return nil
}

func (x *ServerOrder) GetNotAllowedNodeIds() [][]byte {
	if x != nil {
		return x.NotAllowedNodeIds
	}
	return nil
}

type ServerBid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//The common fields shared between both ask and bid order types.
	Details *ServerOrder `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	//
	//Required number of blocks that a channel opened as a result of this bid
	//should be kept open.
	LeaseDurationBlocks uint32 `protobuf:"varint,2,opt,name=lease_duration_blocks,json=leaseDurationBlocks,proto3" json:"lease_duration_blocks,omitempty"`
	//
	//The version of the order format that is used. Will be increased once new
	//features are added.
	Version uint32 `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	//
	//The minimum node tier this order should be matched with. Only asks backed by
	//a node this tier or higher will be eligible for matching with this bid.
	MinNodeTier NodeTier `protobuf:"varint,5,opt,name=min_node_tier,json=minNodeTier,proto3,enum=poolrpc.NodeTier" json:"min_node_tier,omitempty"`
	//
	//Give the incoming channel that results from this bid being matched an
	//initial outbound balance by adding additional funds from the taker's account
	//into the channel. As a simplification for the execution protocol and the
	//channel reserve calculations, the self_chan_balance can be at most the same
	//as the order amount and the min_chan_amt must be set to the full order
	//amount.
	SelfChanBalance uint64 `protobuf:"varint,6,opt,name=self_chan_balance,json=selfChanBalance,proto3" json:"self_chan_balance,omitempty"`
	//
	//If this bid order is meant to lease a channel for another node (which is
	//dubbed a "sidecar channel") then this boolean needs to be set to true. The
	//multi_sig_key, node_pub and node_addr fields of the order details must then
	//correspond to the recipient node's details.
	IsSidecarChannel bool `protobuf:"varint,7,opt,name=is_sidecar_channel,json=isSidecarChannel,proto3" json:"is_sidecar_channel,omitempty"`
	//
	//Signals if this bid is interested in an announced or unannounced channel.
	UnannouncedChannel bool `protobuf:"varint,8,opt,name=unannounced_channel,json=unannouncedChannel,proto3" json:"unannounced_channel,omitempty"`
}

func (x *ServerBid) Reset() {
	*x = ServerBid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auctioneer_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerBid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerBid) ProtoMessage() {}

func (x *ServerBid) ProtoReflect() protoreflect.Message {
	mi := &file_auctioneer_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerBid.ProtoReflect.Descriptor instead.
func (*ServerBid) Descriptor() ([]byte, []int) {
	return file_auctioneer_proto_rawDescGZIP(), []int{32}
}

func (x *ServerBid) GetDetails() *ServerOrder {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *ServerBid) GetLeaseDurationBlocks() uint32 {
	if x != nil {
		return x.LeaseDurationBlocks
	}
	return 0
}

func (x *ServerBid) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ServerBid) GetMinNodeTier() NodeTier {
	if x != nil {
		return x.MinNodeTier
	}
	return NodeTier_TIER_DEFAULT
}

func (x *ServerBid) GetSelfChanBalance() uint64 {
	if x != nil {
		return x.SelfChanBalance
	}
	return 0
}

func (x *ServerBid) GetIsSidecarChannel() bool {
	if x != nil {
		return x.IsSidecarChannel
	}
	return false
}

func (x *ServerBid) GetUnannouncedChannel() bool {
	if x != nil {
		return x.UnannouncedChannel
	}
	return false
}

type ServerAsk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//The common fields shared between both ask and bid order types.
	Details *ServerOrder `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	//
	//The number of blocks the liquidity provider is willing to provide the
	//channel funds for.
	LeaseDurationBlocks uint32 `protobuf:"varint,4,opt,name=lease_duration_blocks,json=leaseDurationBlocks,proto3" json:"lease_duration_blocks,omitempty"`
	//
	//The version of the order format that is used. Will be increased once new
	//features are added.
	Version uint32 `protobuf:"varint,5,opt,name=version,proto3" json:"version,omitempty"`
	//
	//The constraints for selling the liquidity based on channel discoverability.
	AnnouncementConstraints ChannelAnnouncementConstraints `protobuf:"varint,6,opt,name=announcement_constraints,json=announcementConstraints,proto3,enum=poolrpc.ChannelAnnouncementConstraints" json:"announcement_constraints,omitempty"`
}

func (x *ServerAsk) Reset() {
	*x = ServerAsk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auctioneer_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerAsk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerAsk) ProtoMessage() {}

func (x *ServerAsk) ProtoReflect() protoreflect.Message {
	mi := &file_auctioneer_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerAsk.ProtoReflect.Descriptor instead.
func (*ServerAsk) Descriptor() ([]byte, []int) {
	return file_auctioneer_proto_rawDescGZIP(), []int{33}
}

func (x *ServerAsk) GetDetails() *ServerOrder {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *ServerAsk) GetLeaseDurationBlocks() uint32 {
	if x != nil {
		return x.LeaseDurationBlocks
	}
	return 0
}

func (x *ServerAsk) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ServerAsk) GetAnnouncementConstraints() ChannelAnnouncementConstraints {
	if x != nil {
		return x.AnnouncementConstraints
	}
	return ChannelAnnouncementConstraints_ANNOUNCEMENT_NO_PREFERENCE
}

type CancelOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderNonce []byte `protobuf:"bytes,1,opt,name=order_nonce,json=orderNonce,proto3" json:"order_nonce,omitempty"`
}

func (x *CancelOrder) Reset() {
	*x = CancelOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auctioneer_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelOrder) ProtoMessage() {}

func (x *CancelOrder) ProtoReflect() protoreflect.Message {
	mi := &file_auctioneer_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelOrder.ProtoReflect.Descriptor instead.
func (*CancelOrder) Descriptor() ([]byte, []int) {
	return file_auctioneer_proto_rawDescGZIP(), []int{34}
}

func (x *CancelOrder) GetOrderNonce() []byte {
	if x != nil {
		return x.OrderNonce
	}
	return nil
}

type InvalidOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderNonce []byte                  `protobuf:"bytes,1,opt,name=order_nonce,json=orderNonce,proto3" json:"order_nonce,omitempty"`
	FailReason InvalidOrder_FailReason `protobuf:"varint,2,opt,name=fail_reason,json=failReason,proto3,enum=poolrpc.InvalidOrder_FailReason" json:"fail_reason,omitempty"`
	FailString string                  `protobuf:"bytes,3,opt,name=fail_string,json=failString,proto3" json:"fail_string,omitempty"`
}

func (x *InvalidOrder) Reset() {
	*x = InvalidOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auctioneer_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvalidOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvalidOrder) ProtoMessage() {}

func (x *InvalidOrder) ProtoReflect() protoreflect.Message {
	mi := &file_auctioneer_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvalidOrder.ProtoReflect.Descriptor instead.
func (*InvalidOrder) Descriptor() ([]byte, []int) {
	return file_auctioneer_proto_rawDescGZIP(), []int{35}
}

func (x *InvalidOrder) GetOrderNonce() []byte {
	if x != nil {
		return x.OrderNonce
	}
	return nil
}

func (x *InvalidOrder) GetFailReason() InvalidOrder_FailReason {
	if x != nil {
		return x.FailReason
	}
	return InvalidOrder_INVALID_AMT
}

func (x *InvalidOrder) GetFailString() string {
	if x != nil {
		return x.FailString
	}
	return ""
}

type ServerInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The outpoint that the input corresponds to.
	Outpoint *OutPoint `protobuf:"bytes,1,opt,name=outpoint,proto3" json:"outpoint,omitempty"`
	//
	//The signature script required by the input. This only applies to NP2WKH
	//inputs.
	SigScript []byte `protobuf:"bytes,2,opt,name=sig_script,json=sigScript,proto3" json:"sig_script,omitempty"`
}

func (x *ServerInput) Reset() {
	*x = ServerInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auctioneer_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerInput) ProtoMessage() {}

func (x *ServerInput) ProtoReflect() protoreflect.Message {
	mi := &file_auctioneer_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerInput.ProtoReflect.Descriptor instead.
func (*ServerInput) Descriptor() ([]byte, []int) {
	return file_auctioneer_proto_rawDescGZIP(), []int{36}
}

func (x *ServerInput) GetOutpoint() *OutPoint {
	if x != nil {
		return x.Outpoint
	}
	return nil
}

func (x *ServerInput) GetSigScript() []byte {
	if x != nil {
		return x.SigScript
	}
	return nil
}

type ServerOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The value, in satoshis, of the output.
	Value uint64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	// The script of the output to send the value to.
	Script []byte `protobuf:"bytes,2,opt,name=script,proto3" json:"script,omitempty"`
}

func (x *ServerOutput) Reset() {
	*x = ServerOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auctioneer_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerOutput) ProtoMessage() {}

func (x *ServerOutput) ProtoReflect() protoreflect.Message {
	mi := &file_auctioneer_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerOutput.ProtoReflect.Descriptor instead.
func (*ServerOutput) Descriptor() ([]byte, []int) {
	return file_auctioneer_proto_rawDescGZIP(), []int{37}
}

func (x *ServerOutput) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *ServerOutput) GetScript() []byte {
	if x != nil {
		return x.Script
	}
	return nil
}

type ServerModifyAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//The trader's account key of the account to be modified.
	TraderKey []byte `protobuf:"bytes,1,opt,name=trader_key,json=traderKey,proto3" json:"trader_key,omitempty"`
	//
	//An additional set of inputs that can be included in the spending transaction
	//of an account. These can be used to deposit more funds into an account.
	//These must be under control of the backing lnd node's wallet.
	NewInputs []*ServerInput `protobuf:"bytes,2,rep,name=new_inputs,json=newInputs,proto3" json:"new_inputs,omitempty"`
	//
	//An additional set of outputs that can be included in the spending
	//transaction of an account. These can be used to withdraw funds from an
	//account.
	NewOutputs []*ServerOutput `protobuf:"bytes,3,rep,name=new_outputs,json=newOutputs,proto3" json:"new_outputs,omitempty"`
	// The new parameters to apply for the account.
	NewParams *ServerModifyAccountRequest_NewAccountParameters `protobuf:"bytes,4,opt,name=new_params,json=newParams,proto3" json:"new_params,omitempty"`
	//
	//A set of 66-byte nonces for each version 1 (Taproot enabled) account. The
	//nonces can be used to produce a MuSig2 partial signature to spend the
	//account using the key spend path, which is a MuSig2 combined key of the
	//auctioneer key and the trader key.
	TraderNonces []byte `protobuf:"bytes,5,opt,name=trader_nonces,json=traderNonces,proto3" json:"trader_nonces,omitempty"`
	//
	//The full list of UTXO information for each of the inputs being spent. This
	//is required when spending a Taproot enabled (account version 1) output or
	//when adding additional Taproot inputs.
	PrevOutputs []*TxOut `protobuf:"bytes,6,rep,name=prev_outputs,json=prevOutputs,proto3" json:"prev_outputs,omitempty"`
}

func (x *ServerModifyAccountRequest) Reset() {
	*x = ServerModifyAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auctioneer_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerModifyAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerModifyAccountRequest) ProtoMessage() {}

func (x *ServerModifyAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auctioneer_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerModifyAccountRequest.ProtoReflect.Descriptor instead.
func (*ServerModifyAccountRequest) Descriptor() ([]byte, []int) {
	return file_auctioneer_proto_rawDescGZIP(), []int{38}
}

func (x *ServerModifyAccountRequest) GetTraderKey() []byte {
	if x != nil {
		return x.TraderKey
	}
	return nil
}

func (x *ServerModifyAccountRequest) GetNewInputs() []*ServerInput {
	if x != nil {
		return x.NewInputs
	}
	return nil
}

func (x *ServerModifyAccountRequest) GetNewOutputs() []*ServerOutput {
	if x != nil {
		return x.NewOutputs
	}
	return nil
}

func (x *ServerModifyAccountRequest) GetNewParams() *ServerModifyAccountRequest_NewAccountParameters {
	if x != nil {
		return x.NewParams
	}
	return nil
}

func (x *ServerModifyAccountRequest) GetTraderNonces() []byte {
	if x != nil {
		return x.TraderNonces
	}
	return nil
}

func (x *ServerModifyAccountRequest) GetPrevOutputs() []*TxOut {
	if x != nil {
		return x.PrevOutputs
	}
	return nil
}

type ServerModifyAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//The auctioneer's signature that allows a trader to broadcast a transaction
	//spending from an account output. For version 1 (Taproot enabled) accounts,
	//this merely represents a partial MuSig2 signature that can be combined into
	//a full signature by the trader daemon by adding its own partial signature. A
	//set of nonces will be provided by the server (in case this is a v1 account)
	//to allow finalizing the MuSig2 signing session.
	AccountSig []byte `protobuf:"bytes,1,opt,name=account_sig,json=accountSig,proto3" json:"account_sig,omitempty"`
	//
	//An optional set of 66-byte nonces for a version 1 (Taproot enabled) account
	//spend. The nonces can be used to produce a MuSig2 partial signature to spend
	//the account using the key spend path, which is a MuSig2 combined key of the
	//auctioneer key and the trader key.
	ServerNonces []byte `protobuf:"bytes,2,opt,name=server_nonces,json=serverNonces,proto3" json:"server_nonces,omitempty"`
}

func (x *ServerModifyAccountResponse) Reset() {
	*x = ServerModifyAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auctioneer_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerModifyAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerModifyAccountResponse) ProtoMessage() {}

func (x *ServerModifyAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_auctioneer_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerModifyAccountResponse.ProtoReflect.Descriptor instead.
func (*ServerModifyAccountResponse) Descriptor() ([]byte, []int) {
	return file_auctioneer_proto_rawDescGZIP(), []int{39}
}

func (x *ServerModifyAccountResponse) GetAccountSig() []byte {
	if x != nil {
		return x.AccountSig
	}
	return nil
}

func (x *ServerModifyAccountResponse) GetServerNonces() []byte {
	if x != nil {
		return x.ServerNonces
	}
	return nil
}

type ServerOrderStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderNonce []byte `protobuf:"bytes,1,opt,name=order_nonce,json=orderNonce,proto3" json:"order_nonce,omitempty"`
}

func (x *ServerOrderStateRequest) Reset() {
	*x = ServerOrderStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auctioneer_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerOrderStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerOrderStateRequest) ProtoMessage() {}

func (x *ServerOrderStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auctioneer_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerOrderStateRequest.ProtoReflect.Descriptor instead.
func (*ServerOrderStateRequest) Descriptor() ([]byte, []int) {
	return file_auctioneer_proto_rawDescGZIP(), []int{40}
}

func (x *ServerOrderStateRequest) GetOrderNonce() []byte {
	if x != nil {
		return x.OrderNonce
	}
	return nil
}

type ServerOrderStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//The state the order currently is in.
	State OrderState `protobuf:"varint,1,opt,name=state,proto3,enum=poolrpc.OrderState" json:"state,omitempty"`
	//
	//The number of currently unfilled units of this order. This will be equal to
	//the total amount of units until the order has reached the state PARTIAL_FILL
	//or EXECUTED.
	UnitsUnfulfilled uint32 `protobuf:"varint,2,opt,name=units_unfulfilled,json=unitsUnfulfilled,proto3" json:"units_unfulfilled,omitempty"`
}

func (x *ServerOrderStateResponse) Reset() {
	*x = ServerOrderStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auctioneer_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerOrderStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerOrderStateResponse) ProtoMessage() {}

func (x *ServerOrderStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_auctioneer_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerOrderStateResponse.ProtoReflect.Descriptor instead.
func (*ServerOrderStateResponse) Descriptor() ([]byte, []int) {
	return file_auctioneer_proto_rawDescGZIP(), []int{41}
}

func (x *ServerOrderStateResponse) GetState() OrderState {
	if x != nil {
		return x.State
	}
	return OrderState_ORDER_SUBMITTED
}

func (x *ServerOrderStateResponse) GetUnitsUnfulfilled() uint32 {
	if x != nil {
		return x.UnitsUnfulfilled
	}
	return 0
}

type TermsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TermsRequest) Reset() {
	*x = TermsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auctioneer_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TermsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TermsRequest) ProtoMessage() {}

func (x *TermsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auctioneer_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TermsRequest.ProtoReflect.Descriptor instead.
func (*TermsRequest) Descriptor() ([]byte, []int) {
	return file_auctioneer_proto_rawDescGZIP(), []int{42}
}

type TermsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//The maximum account size in satoshis currently allowed by the auctioneer.
	MaxAccountValue uint64 `protobuf:"varint,1,opt,name=max_account_value,json=maxAccountValue,proto3" json:"max_account_value,omitempty"`
	//
	//Deprecated, use explicit order duration from lease_duration_buckets.
	//
	// Deprecated: Do not use.
	MaxOrderDurationBlocks uint32 `protobuf:"varint,2,opt,name=max_order_duration_blocks,json=maxOrderDurationBlocks,proto3" json:"max_order_duration_blocks,omitempty"`
	//
	//The execution fee charged per matched order.
	ExecutionFee *ExecutionFee `protobuf:"bytes,3,opt,name=execution_fee,json=executionFee,proto3" json:"execution_fee,omitempty"`
	//
	//Deprecated, use lease_duration_buckets.
	//
	// Deprecated: Do not use.
	LeaseDurations map[uint32]bool `protobuf:"bytes,4,rep,name=lease_durations,json=leaseDurations,proto3" json:"lease_durations,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// The confirmation target to use for fee estimation of the next batch.
	NextBatchConfTarget uint32 `protobuf:"varint,5,opt,name=next_batch_conf_target,json=nextBatchConfTarget,proto3" json:"next_batch_conf_target,omitempty"`
	//
	//The fee rate, in satoshis per kiloweight, estimated to use for the next
	//batch.
	NextBatchFeeRateSatPerKw uint64 `protobuf:"varint,6,opt,name=next_batch_fee_rate_sat_per_kw,json=nextBatchFeeRateSatPerKw,proto3" json:"next_batch_fee_rate_sat_per_kw,omitempty"`
	//
	//The absolute unix timestamp at which the auctioneer will attempt to clear
	//the next batch.
	NextBatchClearTimestamp uint64 `protobuf:"varint,7,opt,name=next_batch_clear_timestamp,json=nextBatchClearTimestamp,proto3" json:"next_batch_clear_timestamp,omitempty"`
	//
	//The set of lease durations the market is currently accepting and the state
	//the duration buckets currently are in.
	LeaseDurationBuckets map[uint32]DurationBucketState `protobuf:"bytes,8,rep,name=lease_duration_buckets,json=leaseDurationBuckets,proto3" json:"lease_duration_buckets,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=poolrpc.DurationBucketState"`
	//
	//The value used by the auctioneer to determine if an account expiry height
	//needs to be extended after participating in a batch and for how long.
	AutoRenewExtensionBlocks uint32 `protobuf:"varint,9,opt,name=auto_renew_extension_blocks,json=autoRenewExtensionBlocks,proto3" json:"auto_renew_extension_blocks,omitempty"`
}

func (x *TermsResponse) Reset() {
	*x = TermsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auctioneer_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TermsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TermsResponse) ProtoMessage() {}

func (x *TermsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_auctioneer_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TermsResponse.ProtoReflect.Descriptor instead.
func (*TermsResponse) Descriptor() ([]byte, []int) {
	return file_auctioneer_proto_rawDescGZIP(), []int{43}
}

func (x *TermsResponse) GetMaxAccountValue() uint64 {
	if x != nil {
		return x.MaxAccountValue
	}
	return 0
}

// Deprecated: Do not use.
func (x *TermsResponse) GetMaxOrderDurationBlocks() uint32 {
	if x != nil {
		return x.MaxOrderDurationBlocks
	}
	return 0
}

func (x *TermsResponse) GetExecutionFee() *ExecutionFee {
	if x != nil {
		return x.ExecutionFee
	}
	return nil
}

// Deprecated: Do not use.
func (x *TermsResponse) GetLeaseDurations() map[uint32]bool {
	if x != nil {
		return x.LeaseDurations
	}
	return nil
}

func (x *TermsResponse) GetNextBatchConfTarget() uint32 {
	if x != nil {
		return x.NextBatchConfTarget
	}
	return 0
}

func (x *TermsResponse) GetNextBatchFeeRateSatPerKw() uint64 {
	if x != nil {
		return x.NextBatchFeeRateSatPerKw
	}
	return 0
}

func (x *TermsResponse) GetNextBatchClearTimestamp() uint64 {
	if x != nil {
		return x.NextBatchClearTimestamp
	}
	return 0
}

func (x *TermsResponse) GetLeaseDurationBuckets() map[uint32]DurationBucketState {
	if x != nil {
		return x.LeaseDurationBuckets
	}
	return nil
}

func (x *TermsResponse) GetAutoRenewExtensionBlocks() uint32 {
	if x != nil {
		return x.AutoRenewExtensionBlocks
	}
	return 0
}

type RelevantBatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of the batch.
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	//
	//The set of accounts the trader is interested in retrieving information
	//for within the batch. Each account is identified by its trader key.
	Accounts [][]byte `protobuf:"bytes,2,rep,name=accounts,proto3" json:"accounts,omitempty"`
}

func (x *RelevantBatchRequest) Reset() {
	*x = RelevantBatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auctioneer_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelevantBatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelevantBatchRequest) ProtoMessage() {}

func (x *RelevantBatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auctioneer_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelevantBatchRequest.ProtoReflect.Descriptor instead.
func (*RelevantBatchRequest) Descriptor() ([]byte, []int) {
	return file_auctioneer_proto_rawDescGZIP(), []int{44}
}

func (x *RelevantBatchRequest) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *RelevantBatchRequest) GetAccounts() [][]byte {
	if x != nil {
		return x.Accounts
	}
	return nil
}

type RelevantBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The version of the batch.
	Version uint32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	// The unique identifier of the batch.
	Id []byte `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	//
	//The set of modifications that should be applied to the requested accounts as
	//a result of this batch.
	ChargedAccounts []*AccountDiff `protobuf:"bytes,3,rep,name=charged_accounts,json=chargedAccounts,proto3" json:"charged_accounts,omitempty"`
	//
	//Deprecated, use matched_markets.
	//
	// Deprecated: Do not use.
	MatchedOrders map[string]*MatchedOrder `protobuf:"bytes,4,rep,name=matched_orders,json=matchedOrders,proto3" json:"matched_orders,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	//
	//Deprecated, use matched_markets.
	//
	// Deprecated: Do not use.
	ClearingPriceRate uint32 `protobuf:"varint,5,opt,name=clearing_price_rate,json=clearingPriceRate,proto3" json:"clearing_price_rate,omitempty"`
	// The fee parameters used to calculate the execution fees.
	ExecutionFee *ExecutionFee `protobuf:"bytes,6,opt,name=execution_fee,json=executionFee,proto3" json:"execution_fee,omitempty"`
	// The batch transaction including all witness data.
	Transaction []byte `protobuf:"bytes,7,opt,name=transaction,proto3" json:"transaction,omitempty"`
	//
	//Fee rate of the batch transaction, expressed in satoshis per 1000 weight
	//units (sat/kW).
	FeeRateSatPerKw uint64 `protobuf:"varint,8,opt,name=fee_rate_sat_per_kw,json=feeRateSatPerKw,proto3" json:"fee_rate_sat_per_kw,omitempty"`
	// The unix timestamp in nanoseconds the batch was made.
	CreationTimestampNs uint64 `protobuf:"varint,9,opt,name=creation_timestamp_ns,json=creationTimestampNs,proto3" json:"creation_timestamp_ns,omitempty"`
	//
	//Maps the distinct lease duration markets to the orders that were matched
	//within and the discovered market clearing price.
	MatchedMarkets map[uint32]*MatchedMarket `protobuf:"bytes,10,rep,name=matched_markets,json=matchedMarkets,proto3" json:"matched_markets,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RelevantBatch) Reset() {
	*x = RelevantBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auctioneer_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelevantBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelevantBatch) ProtoMessage() {}

func (x *RelevantBatch) ProtoReflect() protoreflect.Message {
	mi := &file_auctioneer_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelevantBatch.ProtoReflect.Descriptor instead.
func (*RelevantBatch) Descriptor() ([]byte, []int) {
	return file_auctioneer_proto_rawDescGZIP(), []int{45}
}

func (x *RelevantBatch) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *RelevantBatch) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *RelevantBatch) GetChargedAccounts() []*AccountDiff {
	if x != nil {
		return x.ChargedAccounts
	}
	return nil
}

// Deprecated: Do not use.
func (x *RelevantBatch) GetMatchedOrders() map[string]*MatchedOrder {
	if x != nil {
		return x.MatchedOrders
	}
	return nil
}

// Deprecated: Do not use.
func (x *RelevantBatch) GetClearingPriceRate() uint32 {
	if x != nil {
		return x.ClearingPriceRate
	}
	return 0
}

func (x *RelevantBatch) GetExecutionFee() *ExecutionFee {
	if x != nil {
		return x.ExecutionFee
	}
	return nil
}

func (x *RelevantBatch) GetTransaction() []byte {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *RelevantBatch) GetFeeRateSatPerKw() uint64 {
	if x != nil {
		return x.FeeRateSatPerKw
	}
	return 0
}

func (x *RelevantBatch) GetCreationTimestampNs() uint64 {
	if x != nil {
		return x.CreationTimestampNs
	}
	return 0
}

func (x *RelevantBatch) GetMatchedMarkets() map[uint32]*MatchedMarket {
	if x != nil {
		return x.MatchedMarkets
	}
	return nil
}

type ExecutionFee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//The base fee in satoshis charged per order, regardless of the matched size.
	BaseFee uint64 `protobuf:"varint,1,opt,name=base_fee,json=baseFee,proto3" json:"base_fee,omitempty"`
	//
	//The fee rate in parts per million.
	FeeRate uint64 `protobuf:"varint,2,opt,name=fee_rate,json=feeRate,proto3" json:"fee_rate,omitempty"`
}

func (x *ExecutionFee) Reset() {
	*x = ExecutionFee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auctioneer_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionFee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionFee) ProtoMessage() {}

func (x *ExecutionFee) ProtoReflect() protoreflect.Message {
	mi := &file_auctioneer_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionFee.ProtoReflect.Descriptor instead.
func (*ExecutionFee) Descriptor() ([]byte, []int) {
	return file_auctioneer_proto_rawDescGZIP(), []int{46}
}

func (x *ExecutionFee) GetBaseFee() uint64 {
	if x != nil {
		return x.BaseFee
	}
	return 0
}

func (x *ExecutionFee) GetFeeRate() uint64 {
	if x != nil {
		return x.FeeRate
	}
	return 0
}

type NodeAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Network string `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	Addr    string `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
}

func (x *NodeAddress) Reset() {
	*x = NodeAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auctioneer_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeAddress) ProtoMessage() {}

func (x *NodeAddress) ProtoReflect() protoreflect.Message {
	mi := &file_auctioneer_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeAddress.ProtoReflect.Descriptor instead.
func (*NodeAddress) Descriptor() ([]byte, []int) {
	return file_auctioneer_proto_rawDescGZIP(), []int{47}
}

func (x *NodeAddress) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *NodeAddress) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

type OutPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//Raw bytes representing the transaction id.
	Txid []byte `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
	//
	//The index of the output on the transaction.
	OutputIndex uint32 `protobuf:"varint,2,opt,name=output_index,json=outputIndex,proto3" json:"output_index,omitempty"`
}

func (x *OutPoint) Reset() {
	*x = OutPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auctioneer_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutPoint) ProtoMessage() {}

func (x *OutPoint) ProtoReflect() protoreflect.Message {
	mi := &file_auctioneer_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutPoint.ProtoReflect.Descriptor instead.
func (*OutPoint) Descriptor() ([]byte, []int) {
	return file_auctioneer_proto_rawDescGZIP(), []int{48}
}

func (x *OutPoint) GetTxid() []byte {
	if x != nil {
		return x.Txid
	}
	return nil
}

func (x *OutPoint) GetOutputIndex() uint32 {
	if x != nil {
		return x.OutputIndex
	}
	return 0
}

type AskSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The version of the order.
	Version uint32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	// The period of time the channel will survive for.
	LeaseDurationBlocks uint32 `protobuf:"varint,2,opt,name=lease_duration_blocks,json=leaseDurationBlocks,proto3" json:"lease_duration_blocks,omitempty"`
	// The true bid price of the order in parts per billion.
	RateFixed uint32 `protobuf:"varint,3,opt,name=rate_fixed,json=rateFixed,proto3" json:"rate_fixed,omitempty"`
	// The channel type to be created.
	ChanType OrderChannelType `protobuf:"varint,4,opt,name=chan_type,json=chanType,proto3,enum=poolrpc.OrderChannelType" json:"chan_type,omitempty"`
}

func (x *AskSnapshot) Reset() {
	*x = AskSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auctioneer_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AskSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AskSnapshot) ProtoMessage() {}

func (x *AskSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_auctioneer_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AskSnapshot.ProtoReflect.Descriptor instead.
func (*AskSnapshot) Descriptor() ([]byte, []int) {
	return file_auctioneer_proto_rawDescGZIP(), []int{49}
}

func (x *AskSnapshot) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *AskSnapshot) GetLeaseDurationBlocks() uint32 {
	if x != nil {
		return x.LeaseDurationBlocks
	}
	return 0
}

func (x *AskSnapshot) GetRateFixed() uint32 {
	if x != nil {
		return x.RateFixed
	}
	return 0
}

func (x *AskSnapshot) GetChanType() OrderChannelType {
	if x != nil {
		return x.ChanType
	}
	return OrderChannelType_ORDER_CHANNEL_TYPE_UNKNOWN
}

type BidSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The version of the order.
	Version uint32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	// The period of time the matched channel should be allocated for.
	LeaseDurationBlocks uint32 `protobuf:"varint,2,opt,name=lease_duration_blocks,json=leaseDurationBlocks,proto3" json:"lease_duration_blocks,omitempty"`
	// The true bid price of the order in parts per billion.
	RateFixed uint32 `protobuf:"varint,3,opt,name=rate_fixed,json=rateFixed,proto3" json:"rate_fixed,omitempty"`
	// The channel type to be created.
	ChanType OrderChannelType `protobuf:"varint,4,opt,name=chan_type,json=chanType,proto3,enum=poolrpc.OrderChannelType" json:"chan_type,omitempty"`
}

func (x *BidSnapshot) Reset() {
	*x = BidSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auctioneer_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidSnapshot) ProtoMessage() {}

func (x *BidSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_auctioneer_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidSnapshot.ProtoReflect.Descriptor instead.
func (*BidSnapshot) Descriptor() ([]byte, []int) {
	return file_auctioneer_proto_rawDescGZIP(), []int{50}
}

func (x *BidSnapshot) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *BidSnapshot) GetLeaseDurationBlocks() uint32 {
	if x != nil {
		return x.LeaseDurationBlocks
	}
	return 0
}

func (x *BidSnapshot) GetRateFixed() uint32 {
	if x != nil {
		return x.RateFixed
	}
	return 0
}

func (x *BidSnapshot) GetChanType() OrderChannelType {
	if x != nil {
		return x.ChanType
	}
	return OrderChannelType_ORDER_CHANNEL_TYPE_UNKNOWN
}

type MatchedOrderSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The full ask order that was matched.
	Ask *AskSnapshot `protobuf:"bytes,1,opt,name=ask,proto3" json:"ask,omitempty"`
	// The full bid order that was matched.
	Bid *BidSnapshot `protobuf:"bytes,2,opt,name=bid,proto3" json:"bid,omitempty"`
	// The fixed rate premium that was matched, expressed in parts-ber-billion.
	MatchingRate uint32 `protobuf:"varint,3,opt,name=matching_rate,json=matchingRate,proto3" json:"matching_rate,omitempty"`
	// The total number of satoshis that were bought.
	TotalSatsCleared uint64 `protobuf:"varint,4,opt,name=total_sats_cleared,json=totalSatsCleared,proto3" json:"total_sats_cleared,omitempty"`
	// The total number of units that were matched.
	UnitsMatched uint32 `protobuf:"varint,5,opt,name=units_matched,json=unitsMatched,proto3" json:"units_matched,omitempty"`
}

func (x *MatchedOrderSnapshot) Reset() {
	*x = MatchedOrderSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auctioneer_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchedOrderSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchedOrderSnapshot) ProtoMessage() {}

func (x *MatchedOrderSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_auctioneer_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchedOrderSnapshot.ProtoReflect.Descriptor instead.
func (*MatchedOrderSnapshot) Descriptor() ([]byte, []int) {
	return file_auctioneer_proto_rawDescGZIP(), []int{51}
}

func (x *MatchedOrderSnapshot) GetAsk() *AskSnapshot {
	if x != nil {
		return x.Ask
	}
	return nil
}

func (x *MatchedOrderSnapshot) GetBid() *BidSnapshot {
	if x != nil {
		return x.Bid
	}
	return nil
}

func (x *MatchedOrderSnapshot) GetMatchingRate() uint32 {
	if x != nil {
		return x.MatchingRate
	}
	return 0
}

func (x *MatchedOrderSnapshot) GetTotalSatsCleared() uint64 {
	if x != nil {
		return x.TotalSatsCleared
	}
	return 0
}

func (x *MatchedOrderSnapshot) GetUnitsMatched() uint32 {
	if x != nil {
		return x.UnitsMatched
	}
	return 0
}

type BatchSnapshotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of the batch encoded as a compressed pubkey.
	BatchId []byte `protobuf:"bytes,1,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
}

func (x *BatchSnapshotRequest) Reset() {
	*x = BatchSnapshotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auctioneer_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchSnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchSnapshotRequest) ProtoMessage() {}

func (x *BatchSnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auctioneer_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchSnapshotRequest.ProtoReflect.Descriptor instead.
func (*BatchSnapshotRequest) Descriptor() ([]byte, []int) {
	return file_auctioneer_proto_rawDescGZIP(), []int{52}
}

func (x *BatchSnapshotRequest) GetBatchId() []byte {
	if x != nil {
		return x.BatchId
	}
	return nil
}

type MatchedMarketSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//The set of all orders matched in the batch.
	MatchedOrders []*MatchedOrderSnapshot `protobuf:"bytes,1,rep,name=matched_orders,json=matchedOrders,proto3" json:"matched_orders,omitempty"`
	//
	//The uniform clearing price rate in parts per billion that was used for this
	//batch.
	ClearingPriceRate uint32 `protobuf:"varint,2,opt,name=clearing_price_rate,json=clearingPriceRate,proto3" json:"clearing_price_rate,omitempty"`
}

func (x *MatchedMarketSnapshot) Reset() {
	*x = MatchedMarketSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auctioneer_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchedMarketSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchedMarketSnapshot) ProtoMessage() {}

func (x *MatchedMarketSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_auctioneer_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchedMarketSnapshot.ProtoReflect.Descriptor instead.
func (*MatchedMarketSnapshot) Descriptor() ([]byte, []int) {
	return file_auctioneer_proto_rawDescGZIP(), []int{53}
}

func (x *MatchedMarketSnapshot) GetMatchedOrders() []*MatchedOrderSnapshot {
	if x != nil {
		return x.MatchedOrders
	}
	return nil
}

func (x *MatchedMarketSnapshot) GetClearingPriceRate() uint32 {
	if x != nil {
		return x.ClearingPriceRate
	}
	return 0
}

type BatchSnapshotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The version of the batch.
	Version uint32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	// The unique identifier of the batch.
	BatchId []byte `protobuf:"bytes,2,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	// The unique identifier of the prior batch.
	PrevBatchId []byte `protobuf:"bytes,3,opt,name=prev_batch_id,json=prevBatchId,proto3" json:"prev_batch_id,omitempty"`
	//
	//Deprecated, use matched_markets.
	//
	// Deprecated: Do not use.
	ClearingPriceRate uint32 `protobuf:"varint,4,opt,name=clearing_price_rate,json=clearingPriceRate,proto3" json:"clearing_price_rate,omitempty"`
	//
	//Deprecated, use matched_markets.
	//
	// Deprecated: Do not use.
	MatchedOrders []*MatchedOrderSnapshot `protobuf:"bytes,5,rep,name=matched_orders,json=matchedOrders,proto3" json:"matched_orders,omitempty"`
	// The txid of the batch transaction.
	BatchTxId string `protobuf:"bytes,7,opt,name=batch_tx_id,json=batchTxId,proto3" json:"batch_tx_id,omitempty"`
	// The batch transaction including all witness data.
	BatchTx []byte `protobuf:"bytes,6,opt,name=batch_tx,json=batchTx,proto3" json:"batch_tx,omitempty"`
	// The fee rate, in satoshis per kiloweight, of the batch transaction.
	BatchTxFeeRateSatPerKw uint64 `protobuf:"varint,8,opt,name=batch_tx_fee_rate_sat_per_kw,json=batchTxFeeRateSatPerKw,proto3" json:"batch_tx_fee_rate_sat_per_kw,omitempty"`
	// The unix timestamp in nanoseconds the batch was made.
	CreationTimestampNs uint64 `protobuf:"varint,9,opt,name=creation_timestamp_ns,json=creationTimestampNs,proto3" json:"creation_timestamp_ns,omitempty"`
	//
	//Maps the distinct lease duration markets to the orders that were matched
	//within and the discovered market clearing price.
	MatchedMarkets map[uint32]*MatchedMarketSnapshot `protobuf:"bytes,10,rep,name=matched_markets,json=matchedMarkets,proto3" json:"matched_markets,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BatchSnapshotResponse) Reset() {
	*x = BatchSnapshotResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auctioneer_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchSnapshotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchSnapshotResponse) ProtoMessage() {}

func (x *BatchSnapshotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_auctioneer_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchSnapshotResponse.ProtoReflect.Descriptor instead.
func (*BatchSnapshotResponse) Descriptor() ([]byte, []int) {
	return file_auctioneer_proto_rawDescGZIP(), []int{54}
}

func (x *BatchSnapshotResponse) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *BatchSnapshotResponse) GetBatchId() []byte {
	if x != nil {
		return x.BatchId
	}
	return nil
}

func (x *BatchSnapshotResponse) GetPrevBatchId() []byte {
	if x != nil {
		return x.PrevBatchId
	}
	return nil
}

// Deprecated: Do not use.
func (x *BatchSnapshotResponse) GetClearingPriceRate() uint32 {
	if x != nil {
		return x.ClearingPriceRate
	}
	return 0
}

// Deprecated: Do not use.
func (x *BatchSnapshotResponse) GetMatchedOrders() []*MatchedOrderSnapshot {
	if x != nil {
		return x.MatchedOrders
	}
	return nil
}

func (x *BatchSnapshotResponse) GetBatchTxId() string {
	if x != nil {
		return x.BatchTxId
	}
	return ""
}

func (x *BatchSnapshotResponse) GetBatchTx() []byte {
	if x != nil {
		return x.BatchTx
	}
	return nil
}

func (x *BatchSnapshotResponse) GetBatchTxFeeRateSatPerKw() uint64 {
	if x != nil {
		return x.BatchTxFeeRateSatPerKw
	}
	return 0
}

func (x *BatchSnapshotResponse) GetCreationTimestampNs() uint64 {
	if x != nil {
		return x.CreationTimestampNs
	}
	return 0
}

func (x *BatchSnapshotResponse) GetMatchedMarkets() map[uint32]*MatchedMarketSnapshot {
	if x != nil {
		return x.MatchedMarkets
	}
	return nil
}

type ServerNodeRatingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The target node to obtain ratings information for.
	NodePubkeys [][]byte `protobuf:"bytes,1,rep,name=node_pubkeys,json=nodePubkeys,proto3" json:"node_pubkeys,omitempty"`
}

func (x *ServerNodeRatingRequest) Reset() {
	*x = ServerNodeRatingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auctioneer_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerNodeRatingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerNodeRatingRequest) ProtoMessage() {}

func (x *ServerNodeRatingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auctioneer_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerNodeRatingRequest.ProtoReflect.Descriptor instead.
func (*ServerNodeRatingRequest) Descriptor() ([]byte, []int) {
	return file_auctioneer_proto_rawDescGZIP(), []int{55}
}

func (x *ServerNodeRatingRequest) GetNodePubkeys() [][]byte {
	if x != nil {
		return x.NodePubkeys
	}
	return nil
}

type NodeRating struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The pubkey for the node these ratings belong to.
	NodePubkey []byte `protobuf:"bytes,1,opt,name=node_pubkey,json=nodePubkey,proto3" json:"node_pubkey,omitempty"`
	// The tier of the target node.
	NodeTier NodeTier `protobuf:"varint,2,opt,name=node_tier,json=nodeTier,proto3,enum=poolrpc.NodeTier" json:"node_tier,omitempty"`
}

func (x *NodeRating) Reset() {
	*x = NodeRating{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auctioneer_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeRating) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeRating) ProtoMessage() {}

func (x *NodeRating) ProtoReflect() protoreflect.Message {
	mi := &file_auctioneer_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeRating.ProtoReflect.Descriptor instead.
func (*NodeRating) Descriptor() ([]byte, []int) {
	return file_auctioneer_proto_rawDescGZIP(), []int{56}
}

func (x *NodeRating) GetNodePubkey() []byte {
	if x != nil {
		return x.NodePubkey
	}
	return nil
}

func (x *NodeRating) GetNodeTier() NodeTier {
	if x != nil {
		return x.NodeTier
	}
	return NodeTier_TIER_DEFAULT
}

type ServerNodeRatingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A series of node ratings for each of the queried nodes.
	NodeRatings []*NodeRating `protobuf:"bytes,1,rep,name=node_ratings,json=nodeRatings,proto3" json:"node_ratings,omitempty"`
}

func (x *ServerNodeRatingResponse) Reset() {
	*x = ServerNodeRatingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auctioneer_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerNodeRatingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerNodeRatingResponse) ProtoMessage() {}

func (x *ServerNodeRatingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_auctioneer_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerNodeRatingResponse.ProtoReflect.Descriptor instead.
func (*ServerNodeRatingResponse) Descriptor() ([]byte, []int) {
	return file_auctioneer_proto_rawDescGZIP(), []int{57}
}

func (x *ServerNodeRatingResponse) GetNodeRatings() []*NodeRating {
	if x != nil {
		return x.NodeRatings
	}
	return nil
}

type BatchSnapshotsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//The unique identifier of the first batch to return, encoded as a compressed
	//pubkey. This represents the newest/most current batch to fetch. If this is
	//empty or a zero batch ID, the most recent finalized batch is used as the
	//starting point to go back from.
	StartBatchId []byte `protobuf:"bytes,1,opt,name=start_batch_id,json=startBatchId,proto3" json:"start_batch_id,omitempty"`
	//
	//The number of batches to return at most, including the start batch.
	NumBatchesBack uint32 `protobuf:"varint,2,opt,name=num_batches_back,json=numBatchesBack,proto3" json:"num_batches_back,omitempty"`
}

func (x *BatchSnapshotsRequest) Reset() {
	*x = BatchSnapshotsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auctioneer_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchSnapshotsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchSnapshotsRequest) ProtoMessage() {}

func (x *BatchSnapshotsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auctioneer_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchSnapshotsRequest.ProtoReflect.Descriptor instead.
func (*BatchSnapshotsRequest) Descriptor() ([]byte, []int) {
	return file_auctioneer_proto_rawDescGZIP(), []int{58}
}

func (x *BatchSnapshotsRequest) GetStartBatchId() []byte {
	if x != nil {
		return x.StartBatchId
	}
	return nil
}

func (x *BatchSnapshotsRequest) GetNumBatchesBack() uint32 {
	if x != nil {
		return x.NumBatchesBack
	}
	return 0
}

type BatchSnapshotsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of batches requested.
	Batches []*BatchSnapshotResponse `protobuf:"bytes,1,rep,name=batches,proto3" json:"batches,omitempty"`
}

func (x *BatchSnapshotsResponse) Reset() {
	*x = BatchSnapshotsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auctioneer_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchSnapshotsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchSnapshotsResponse) ProtoMessage() {}

func (x *BatchSnapshotsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_auctioneer_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchSnapshotsResponse.ProtoReflect.Descriptor instead.
func (*BatchSnapshotsResponse) Descriptor() ([]byte, []int) {
	return file_auctioneer_proto_rawDescGZIP(), []int{59}
}

func (x *BatchSnapshotsResponse) GetBatches() []*BatchSnapshotResponse {
	if x != nil {
		return x.Batches
	}
	return nil
}

type MarketInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MarketInfoRequest) Reset() {
	*x = MarketInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auctioneer_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketInfoRequest) ProtoMessage() {}

func (x *MarketInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auctioneer_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketInfoRequest.ProtoReflect.Descriptor instead.
func (*MarketInfoRequest) Descriptor() ([]byte, []int) {
	return file_auctioneer_proto_rawDescGZIP(), []int{60}
}

type MarketInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of open/pending ask orders per node tier.
	NumAsks []*MarketInfo_TierValue `protobuf:"bytes,1,rep,name=num_asks,json=numAsks,proto3" json:"num_asks,omitempty"`
	// The number of open/pending bid orders per node tier.
	NumBids []*MarketInfo_TierValue `protobuf:"bytes,2,rep,name=num_bids,json=numBids,proto3" json:"num_bids,omitempty"`
	//
	//The total number of open/unmatched units in open/pending ask orders per node
	//tier.
	AskOpenInterestUnits []*MarketInfo_TierValue `protobuf:"bytes,3,rep,name=ask_open_interest_units,json=askOpenInterestUnits,proto3" json:"ask_open_interest_units,omitempty"`
	//
	//The total number of open/unmatched units in open/pending bid orders per node
	//tier.
	BidOpenInterestUnits []*MarketInfo_TierValue `protobuf:"bytes,4,rep,name=bid_open_interest_units,json=bidOpenInterestUnits,proto3" json:"bid_open_interest_units,omitempty"`
}

func (x *MarketInfo) Reset() {
	*x = MarketInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auctioneer_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketInfo) ProtoMessage() {}

func (x *MarketInfo) ProtoReflect() protoreflect.Message {
	mi := &file_auctioneer_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketInfo.ProtoReflect.Descriptor instead.
func (*MarketInfo) Descriptor() ([]byte, []int) {
	return file_auctioneer_proto_rawDescGZIP(), []int{61}
}

func (x *MarketInfo) GetNumAsks() []*MarketInfo_TierValue {
	if x != nil {
		return x.NumAsks
	}
	return nil
}

func (x *MarketInfo) GetNumBids() []*MarketInfo_TierValue {
	if x != nil {
		return x.NumBids
	}
	return nil
}

func (x *MarketInfo) GetAskOpenInterestUnits() []*MarketInfo_TierValue {
	if x != nil {
		return x.AskOpenInterestUnits
	}
	return nil
}

func (x *MarketInfo) GetBidOpenInterestUnits() []*MarketInfo_TierValue {
	if x != nil {
		return x.BidOpenInterestUnits
	}
	return nil
}

type MarketInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A map of all markets identified by their lease duration and the current
	// set of statistics.
	Markets map[uint32]*MarketInfo `protobuf:"bytes,1,rep,name=markets,proto3" json:"markets,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MarketInfoResponse) Reset() {
	*x = MarketInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auctioneer_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketInfoResponse) ProtoMessage() {}

func (x *MarketInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_auctioneer_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketInfoResponse.ProtoReflect.Descriptor instead.
func (*MarketInfoResponse) Descriptor() ([]byte, []int) {
	return file_auctioneer_proto_rawDescGZIP(), []int{62}
}

func (x *MarketInfoResponse) GetMarkets() map[uint32]*MarketInfo {
	if x != nil {
		return x.Markets
	}
	return nil
}

type ServerModifyAccountRequest_NewAccountParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The new value of the account.
	Value uint64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	// The new expiry of the account as an absolute height.
	Expiry uint32 `protobuf:"varint,2,opt,name=expiry,proto3" json:"expiry,omitempty"`
	// The new version of the account.
	Version uint32 `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *ServerModifyAccountRequest_NewAccountParameters) Reset() {
	*x = ServerModifyAccountRequest_NewAccountParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auctioneer_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerModifyAccountRequest_NewAccountParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerModifyAccountRequest_NewAccountParameters) ProtoMessage() {}

func (x *ServerModifyAccountRequest_NewAccountParameters) ProtoReflect() protoreflect.Message {
	mi := &file_auctioneer_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerModifyAccountRequest_NewAccountParameters.ProtoReflect.Descriptor instead.
func (*ServerModifyAccountRequest_NewAccountParameters) Descriptor() ([]byte, []int) {
	return file_auctioneer_proto_rawDescGZIP(), []int{38, 0}
}

func (x *ServerModifyAccountRequest_NewAccountParameters) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *ServerModifyAccountRequest_NewAccountParameters) GetExpiry() uint32 {
	if x != nil {
		return x.Expiry
	}
	return 0
}

func (x *ServerModifyAccountRequest_NewAccountParameters) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type MarketInfo_TierValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tier  NodeTier `protobuf:"varint,1,opt,name=tier,proto3,enum=poolrpc.NodeTier" json:"tier,omitempty"`
	Value uint32   `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MarketInfo_TierValue) Reset() {
	*x = MarketInfo_TierValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auctioneer_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketInfo_TierValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketInfo_TierValue) ProtoMessage() {}

func (x *MarketInfo_TierValue) ProtoReflect() protoreflect.Message {
	mi := &file_auctioneer_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketInfo_TierValue.ProtoReflect.Descriptor instead.
func (*MarketInfo_TierValue) Descriptor() ([]byte, []int) {
	return file_auctioneer_proto_rawDescGZIP(), []int{61, 0}
}

func (x *MarketInfo_TierValue) GetTier() NodeTier {
	if x != nil {
		return x.Tier
	}
	return NodeTier_TIER_DEFAULT
}

func (x *MarketInfo_TierValue) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

var File_auctioneer_proto protoreflect.FileDescriptor

var file_auctioneer_proto_rawDesc = []byte{
	0x0a, 0x10, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x07, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x22, 0x9c, 0x01, 0x0a, 0x15,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x6b, 0x0a, 0x16, 0x52, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x65,
	0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x61, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x22, 0x9d, 0x02, 0x0a, 0x18, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x6e, 0x69, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x6f,
	0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0c,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x1d,
	0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x1b, 0x0a, 0x19, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x49, 0x6e, 0x69, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x18, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x26, 0x0a, 0x03, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41,
	0x73, 0x6b, 0x48, 0x00, 0x52, 0x03, 0x61, 0x73, 0x6b, 0x12, 0x26, 0x0a, 0x03, 0x62, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x69, 0x64, 0x48, 0x00, 0x52, 0x03, 0x62, 0x69,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x42, 0x09, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x82, 0x01, 0x0a, 0x19,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0d, 0x69, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0c, 0x69, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x08, 0x61, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x65, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x22, 0x4c, 0x0a, 0x18, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x14,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x1b,
	0x0a, 0x19, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe0, 0x02, 0x0a, 0x14,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x3c, 0x0a, 0x09, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x61, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72,
	0x70, 0x63, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x12, 0x33, 0x0a,
	0x06, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x73, 0x69, 0x67,
	0x6e, 0x12, 0x34, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x07,
	0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x42, 0x05, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x59,
	0x0a, 0x11, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x72, 0x0a, 0x13, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4e, 0x6f, 0x6e,
	0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x73, 0x69, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x75, 0x74, 0x68, 0x53, 0x69, 0x67, 0x22, 0x2d, 0x0a,
	0x10, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x22, 0xa4, 0x03, 0x0a,
	0x10, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x70, 0x6f, 0x6f, 0x6c,
	0x72, 0x70, 0x63, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x2e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x56, 0x0a,
	0x0f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x2e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x1a, 0x57, 0x0a, 0x13, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x63,
	0x0a, 0x0c, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x0b,
	0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x53,
	0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x4d, 0x49, 0x53, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f,
	0x52, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x56, 0x45, 0x52,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x02, 0x12,
	0x12, 0x0a, 0x0e, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43,
	0x54, 0x10, 0x03, 0x22, 0xb3, 0x01, 0x0a, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x0b, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x26, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0x43, 0x0a, 0x11, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x55, 0x50,
	0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x10, 0x00, 0x12, 0x1a, 0x0a,
	0x16, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x46, 0x55, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x22, 0xf9, 0x01, 0x0a, 0x0b, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70,
	0x63, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x4b, 0x65,
	0x79, 0x12, 0x37, 0x0a, 0x18, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x15, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x42, 0x61, 0x73, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x19, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x16, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x65,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0xf0, 0x03, 0x0a, 0x0e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73,
	0x69, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x6f, 0x6f, 0x6c,
	0x72, 0x70, 0x63, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69,
	0x67, 0x6e, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x73,
	0x12, 0x4e, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70,
	0x63, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x67, 0x6e,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x12, 0x4e, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70,
	0x63, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x67, 0x6e,
	0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x73,
	0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x55, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x72, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x30, 0x0a, 0x0f, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x22, 0x9b, 0x03, 0x0a, 0x14, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x48, 0x00, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x35, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x2f, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x36, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x65, 0x70, 0x61,
	0x72, 0x65, 0x48, 0x00, 0x52, 0x07, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x12, 0x32, 0x0a,
	0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x6f,
	0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x53, 0x69, 0x67, 0x6e, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x73, 0x69, 0x67,
	0x6e, 0x12, 0x39, 0x0a, 0x08, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x48, 0x00, 0x52, 0x08, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x12, 0x33, 0x0a, 0x07,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x05, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x50, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48, 0x61, 0x73, 0x68, 0x22, 0x31, 0x0a, 0x10, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x22, 0xea, 0x01,
	0x0a, 0x0d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12,
	0x50, 0x0a, 0x0e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70,
	0x63, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11,
	0x63, 0x6c, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x61, 0x74,
	0x65, 0x1a, 0x57, 0x0a, 0x12, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72,
	0x70, 0x63, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x98, 0x06, 0x0a, 0x11, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65,
	0x12, 0x58, 0x0a, 0x0e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72,
	0x70, 0x63, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x65,
	0x70, 0x61, 0x72, 0x65, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0d, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x32, 0x0a, 0x13, 0x63, 0x6c,
	0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x02, 0x18, 0x01, 0x52, 0x11, 0x63, 0x6c, 0x65,
	0x61, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x3f,
	0x0a, 0x10, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72,
	0x70, 0x63, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x69, 0x66, 0x66, 0x52, 0x0f,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12,
	0x3a, 0x0a, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x65, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63,
	0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x52, 0x0c, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x62, 0x61, 0x74, 0x63, 0x68, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x13, 0x66, 0x65, 0x65, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x61, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6b, 0x77, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x66, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x53, 0x61,
	0x74, 0x50, 0x65, 0x72, 0x4b, 0x77, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x65,
	0x62, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c,
	0x66, 0x65, 0x65, 0x52, 0x65, 0x62, 0x61, 0x74, 0x65, 0x53, 0x61, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x57, 0x0a, 0x0f,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x65, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x68, 0x69, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x48, 0x69, 0x6e,
	0x74, 0x1a, 0x57, 0x0a, 0x12, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72,
	0x70, 0x63, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x59, 0x0a, 0x13, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3a, 0x0a, 0x05, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6b, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x70, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x22, 0xf9, 0x01, 0x0a, 0x13, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x53, 0x69, 0x67, 0x6e, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x49, 0x64, 0x12, 0x53, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6e,
	0x6f, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x6f,
	0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x53, 0x69, 0x67, 0x6e, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x0c, 0x70, 0x72, 0x65,
	0x76, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x52,
	0x0b, 0x70, 0x72, 0x65, 0x76, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x1a, 0x3f, 0x0a, 0x11,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x54, 0x0a,
	0x12, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x69, 0x6e, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x78, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x54, 0x78, 0x69, 0x64, 0x4a, 0x04, 0x08,
	0x03, 0x10, 0x04, 0x22, 0xb8, 0x02, 0x0a, 0x0e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3c, 0x0a, 0x0a,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1d, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x48, 0x0a, 0x13, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63,
	0x2e, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x12, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x69, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x0b, 0x0a, 0x07,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x45, 0x52,
	0x56, 0x45, 0x52, 0x5f, 0x53, 0x48, 0x55, 0x54, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x01, 0x12, 0x1a,
	0x0a, 0x16, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x44, 0x4f, 0x45, 0x53, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x49, 0x4e,
	0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x22, 0xdc,
	0x02, 0x0a, 0x0e, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x25,
	0x0a, 0x0e, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x65,
	0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4b,
	0x65, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x5f, 0x68, 0x69, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x48, 0x69, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x6f, 0x6f, 0x6c,
	0x72, 0x70, 0x63, 0x2e, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x6f, 0x75,
	0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74,
	0x5f, 0x74, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x74, 0x54, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x7e, 0x0a,
	0x0c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x36, 0x0a,
	0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x62, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x64, 0x42, 0x69, 0x64, 0x52, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x64, 0x42, 0x69, 0x64, 0x73, 0x12, 0x36, 0x0a, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64,
	0x5f, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x6f,
	0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x41, 0x73, 0x6b,
	0x52, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x41, 0x73, 0x6b, 0x73, 0x22, 0x55, 0x0a,
	0x0a, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x41, 0x73, 0x6b, 0x12, 0x24, 0x0a, 0x03, 0x61,
	0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72,
	0x70, 0x63, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x73, 0x6b, 0x52, 0x03, 0x61, 0x73,
	0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x46, 0x69,
	0x6c, 0x6c, 0x65, 0x64, 0x22, 0x55, 0x0a, 0x0a, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x42,
	0x69, 0x64, 0x12, 0x24, 0x0a, 0x03, 0x62, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x42, 0x69, 0x64, 0x52, 0x03, 0x62, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x6e, 0x69, 0x74,
	0x73, 0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x75, 0x6e, 0x69, 0x74, 0x73, 0x46, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x22, 0x80, 0x03, 0x0a, 0x0b,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x69, 0x66, 0x66, 0x12, 0x25, 0x0a, 0x0e, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0d, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x44, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72,
	0x70, 0x63, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x69, 0x66, 0x66, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x75, 0x74, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x6f, 0x75, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x1d,
	0x0a, 0x0a, 0x6e, 0x65, 0x77, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x12, 0x1f, 0x0a,
	0x0b, 0x6e, 0x65, 0x77, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x6e, 0x65, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x7e,
	0x0a, 0x0c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14,
	0x0a, 0x10, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x44,
	0x55, 0x53, 0x54, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x4f, 0x46, 0x46,
	0x43, 0x48, 0x41, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x4f, 0x55, 0x54, 0x50, 0x55,
	0x54, 0x5f, 0x44, 0x55, 0x53, 0x54, 0x5f, 0x41, 0x44, 0x44, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x5f,
	0x46, 0x45, 0x45, 0x53, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54,
	0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x59, 0x5f, 0x53, 0x50, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x22, 0x94,
	0x04, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x72, 0x61, 0x74, 0x65, 0x46, 0x69, 0x78, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x61, 0x6d, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x61, 0x6d, 0x74, 0x12, 0x20,
	0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x5f, 0x61, 0x6d, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x41, 0x6d, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x6e, 0x63,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x67, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x67, 0x12, 0x22,
	0x0a, 0x0d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x73, 0x69, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x69, 0x67, 0x4b,
	0x65, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x75, 0x62, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x50, 0x75, 0x62, 0x12, 0x31, 0x0a,
	0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x12, 0x3c, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3e,
	0x0a, 0x1d, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x66, 0x65, 0x65, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x61, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6b, 0x77, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x6d, 0x61, 0x78, 0x42, 0x61, 0x74, 0x63, 0x68, 0x46,
	0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x53, 0x61, 0x74, 0x50, 0x65, 0x72, 0x4b, 0x77, 0x12, 0x28,
	0x0a, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x6e, 0x6f, 0x74, 0x5f,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x0f, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x11, 0x6e, 0x6f, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x73, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x4a,
	0x04, 0x08, 0x0b, 0x10, 0x0c, 0x22, 0xd1, 0x02, 0x0a, 0x09, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x42, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x13, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x35, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x69,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72,
	0x70, 0x63, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x69, 0x65, 0x72, 0x52, 0x0b, 0x6d, 0x69, 0x6e,
	0x4e, 0x6f, 0x64, 0x65, 0x54, 0x69, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x65, 0x6c, 0x66,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0f, 0x73, 0x65, 0x6c, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x63,
	0x61, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x69, 0x73, 0x53, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x12, 0x2f, 0x0a, 0x13, 0x75, 0x6e, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65,
	0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x75, 0x6e, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22, 0xed, 0x01, 0x0a, 0x09, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x41, 0x73, 0x6b, 0x12, 0x2e, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72,
	0x70, 0x63, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x07,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x62, 0x0a, 0x18, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70,
	0x63, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73,
	0x52, 0x17, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x2e, 0x0a, 0x0b, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0xb2, 0x01, 0x0a, 0x0c, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x66,
	0x61, 0x69, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x20, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x52, 0x0a, 0x66, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1f,
	0x0a, 0x0b, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x61, 0x69, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22,
	0x1d, 0x0a, 0x0a, 0x46, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x0f, 0x0a,
	0x0b, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x41, 0x4d, 0x54, 0x10, 0x00, 0x22, 0x5b,
	0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x2d, 0x0a,
	0x08, 0x6f, 0x75, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x69, 0x67, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x73, 0x69, 0x67, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x22, 0x3c, 0x0a, 0x0c, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x22, 0xb9, 0x03, 0x0a, 0x1a, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x0a, 0x6e, 0x65, 0x77, 0x5f, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x6f,
	0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x0b,
	0x6e, 0x65, 0x77, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x0a, 0x6e, 0x65, 0x77, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x73, 0x12, 0x57, 0x0a, 0x0a, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72,
	0x70, 0x63, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4e, 0x65,
	0x77, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x6e, 0x63,
	0x65, 0x73, 0x12, 0x31, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72,
	0x70, 0x63, 0x2e, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x73, 0x1a, 0x5e, 0x0a, 0x14, 0x4e, 0x65, 0x77, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x63, 0x0a, 0x1b, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x73, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x53, 0x69, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x3a, 0x0a, 0x17, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e,
	0x6f, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0x72, 0x0a, 0x18, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a,
	0x11, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x5f, 0x75, 0x6e, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x55,
	0x6e, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x22, 0x0e, 0x0a, 0x0c, 0x54, 0x65,
	0x72, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x94, 0x06, 0x0a, 0x0d, 0x54,
	0x65, 0x72, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x6d, 0x61, 0x78, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3d, 0x0a, 0x19, 0x6d, 0x61, 0x78, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x16, 0x6d, 0x61, 0x78, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x3a, 0x0a, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x65, 0x65, 0x52, 0x0c, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x65, 0x65, 0x12, 0x57, 0x0a, 0x0f, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70,
	0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0e, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x33, 0x0a, 0x16,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x5f,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6e, 0x65,
	0x78, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x12, 0x40, 0x0a, 0x1e, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x66, 0x65, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x61, 0x74, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x6b, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x6e, 0x65, 0x78, 0x74, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x53, 0x61, 0x74, 0x50, 0x65,
	0x72, 0x4b, 0x77, 0x12, 0x3b, 0x0a, 0x1a, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x6e, 0x65, 0x78, 0x74, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x66, 0x0a, 0x16, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x14, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x1b, 0x61, 0x75, 0x74, 0x6f,
	0x5f, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x61,
	0x75, 0x74, 0x6f, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x1a, 0x41, 0x0a, 0x13, 0x4c, 0x65, 0x61, 0x73, 0x65,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x65, 0x0a, 0x19, 0x4c, 0x65,
	0x61, 0x73, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72,
	0x70, 0x63, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x42, 0x0a, 0x14, 0x52, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0xcd, 0x05, 0x0a, 0x0d, 0x52, 0x65, 0x6c, 0x65, 0x76, 0x61,
	0x6e, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3f, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x6f,
	0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x69, 0x66,
	0x66, 0x52, 0x0f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x12, 0x54, 0x0a, 0x0e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x6f, 0x6f,
	0x6c, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x32, 0x0a, 0x13, 0x63, 0x6c, 0x65, 0x61,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x02, 0x18, 0x01, 0x52, 0x11, 0x63, 0x6c, 0x65, 0x61, 0x72,
	0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x0d,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x52, 0x0c, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x13, 0x66, 0x65,
	0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x61, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6b,
	0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x66, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65,
	0x53, 0x61, 0x74, 0x50, 0x65, 0x72, 0x4b, 0x77, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6e,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4e, 0x73, 0x12, 0x53, 0x0a, 0x0f,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e,
	0x52, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x73, 0x1a, 0x57, 0x0a, 0x12, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72,
	0x70, 0x63, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x59, 0x0a, 0x13, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x44, 0x0a, 0x0c, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x65, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x66, 0x65,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x46, 0x65, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x66, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x22, 0x3b, 0x0a, 0x0b, 0x4e,
	0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x22, 0x41, 0x0a, 0x08, 0x4f, 0x75, 0x74, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x74, 0x78, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xb2, 0x01, 0x0a, 0x0b,
	0x41, 0x73, 0x6b, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x61, 0x74,
	0x65, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72,
	0x61, 0x74, 0x65, 0x46, 0x69, 0x78, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70, 0x6f,
	0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x22, 0xb2, 0x01, 0x0a, 0x0b, 0x42, 0x69, 0x64, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x72, 0x61, 0x74, 0x65, 0x46, 0x69, 0x78, 0x65, 0x64, 0x12, 0x36, 0x0a,
	0x09, 0x63, 0x68, 0x61, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x19, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x63, 0x68, 0x61,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0xde, 0x01, 0x0a, 0x14, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x26,
	0x0a, 0x03, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x6f,
	0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x73, 0x6b, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x52, 0x03, 0x61, 0x73, 0x6b, 0x12, 0x26, 0x0a, 0x03, 0x62, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x69,
	0x64, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x03, 0x62, 0x69, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x61, 0x74,
	0x73, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x61, 0x74, 0x73, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x65,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x22, 0x31, 0x0a, 0x14, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x22, 0x8d, 0x01, 0x0a, 0x15, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x12, 0x44, 0x0a, 0x0e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x6f,
	0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x0d, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6c, 0x65,
	0x61, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x61, 0x74, 0x65, 0x22, 0xdb, 0x04, 0x0a, 0x15, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a,
	0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x76,
	0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0b, 0x70, 0x72, 0x65, 0x76, 0x42, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x13,
	0x63, 0x6c, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x02, 0x18, 0x01, 0x52, 0x11, 0x63,
	0x6c, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x48, 0x0a, 0x0e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72,
	0x70, 0x63, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0d, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0b, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x54, 0x78, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x74, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x54, 0x78, 0x12, 0x3c, 0x0a, 0x1c, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74,
	0x78, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x61, 0x74, 0x5f, 0x70,
	0x65, 0x72, 0x5f, 0x6b, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x54, 0x78, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x53, 0x61, 0x74, 0x50, 0x65,
	0x72, 0x4b, 0x77, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x13, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x4e, 0x73, 0x12, 0x5b, 0x0a, 0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x64, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x73, 0x1a, 0x61, 0x0a, 0x13, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70,
	0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3c, 0x0a, 0x17, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x75, 0x62, 0x6b, 0x65,
	0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x50, 0x75,
	0x62, 0x6b, 0x65, 0x79, 0x73, 0x22, 0x5d, 0x0a, 0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x75, 0x62, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x50, 0x75,
	0x62, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x69, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70,
	0x63, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x69, 0x65, 0x72, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65,
	0x54, 0x69, 0x65, 0x72, 0x22, 0x52, 0x0a, 0x18, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x36, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x6e, 0x6f, 0x64,
	0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x67, 0x0a, 0x15, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x5f, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x42, 0x61, 0x63,
	0x6b, 0x22, 0x52, 0x0a, 0x16, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70,
	0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x73, 0x22, 0x13, 0x0a, 0x11, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xf6, 0x02, 0x0a, 0x0a, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x08, 0x6e, 0x75, 0x6d,
	0x5f, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x6f,
	0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x54, 0x69, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6e, 0x75, 0x6d, 0x41,
	0x73, 0x6b, 0x73, 0x12, 0x38, 0x0a, 0x08, 0x6e, 0x75, 0x6d, 0x5f, 0x62, 0x69, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x69, 0x65, 0x72, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6e, 0x75, 0x6d, 0x42, 0x69, 0x64, 0x73, 0x12, 0x54, 0x0a,
	0x17, 0x61, 0x73, 0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65,
	0x73, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x69, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x61,
	0x73, 0x6b, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x55, 0x6e,
	0x69, 0x74, 0x73, 0x12, 0x54, 0x0a, 0x17, 0x62, 0x69, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x69, 0x65, 0x72, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x14, 0x62, 0x69, 0x64, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x1a, 0x48, 0x0a, 0x09, 0x54, 0x69, 0x65,
	0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x69, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x54, 0x69, 0x65, 0x72, 0x52, 0x04, 0x74, 0x69, 0x65, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0xa9, 0x01, 0x0a, 0x12, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x07, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x6f,
	0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x1a, 0x4f,
	0x0a, 0x0c, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a,
	0x44, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d,
	0x0a, 0x09, 0x54, 0x57, 0x45, 0x41, 0x4b, 0x4c, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x41, 0x4e, 0x43, 0x48, 0x4f, 0x52, 0x53, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x43,
	0x52, 0x49, 0x50, 0x54, 0x5f, 0x45, 0x4e, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x44, 0x5f, 0x4c, 0x45,
	0x41, 0x53, 0x45, 0x10, 0x02, 0x2a, 0xb7, 0x01, 0x0a, 0x13, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a,
	0x12, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4f,
	0x50, 0x45, 0x4e, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4f,
	0x50, 0x45, 0x4e, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x45,
	0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4c, 0x4f, 0x53,
	0x45, 0x44, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x45,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x42, 0x41, 0x54, 0x43, 0x48, 0x10, 0x05, 0x12, 0x20, 0x0a,
	0x1c, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x5f, 0x50,
	0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x06, 0x2a,
	0x81, 0x01, 0x0a, 0x10, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x5f,
	0x44, 0x45, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x5f, 0x45, 0x4e, 0x46, 0x4f, 0x52, 0x43, 0x45,
	0x44, 0x10, 0x02, 0x2a, 0x34, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x69, 0x65, 0x72, 0x12,
	0x10, 0x0a, 0x0c, 0x54, 0x49, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x49, 0x45, 0x52, 0x5f, 0x30, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x54, 0x49, 0x45, 0x52, 0x5f, 0x31, 0x10, 0x02, 0x2a, 0x6a, 0x0a, 0x1e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x1a, 0x41,
	0x4e, 0x4e, 0x4f, 0x55, 0x4e, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x5f, 0x50,
	0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4f,
	0x4e, 0x4c, 0x59, 0x5f, 0x41, 0x4e, 0x4e, 0x4f, 0x55, 0x4e, 0x43, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x14, 0x0a, 0x10, 0x4f, 0x4e, 0x4c, 0x59, 0x5f, 0x55, 0x4e, 0x41, 0x4e, 0x4e, 0x4f, 0x55, 0x4e,
	0x43, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x9d, 0x01, 0x0a, 0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x55,
	0x42, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x52, 0x44,
	0x45, 0x52, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x4c, 0x59, 0x5f,
	0x46, 0x49, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x04,
	0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45,
	0x44, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x45, 0x44, 0x10, 0x06, 0x2a, 0x5e, 0x0a, 0x13, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0d, 0x0a, 0x09,
	0x4e, 0x4f, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4d,
	0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x01, 0x12, 0x14,
	0x0a, 0x10, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x53, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x4f,
	0x50, 0x45, 0x4e, 0x10, 0x03, 0x32, 0x8d, 0x09, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x0e, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x2e,
	0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54,
	0x0a, 0x0b, 0x49, 0x6e, 0x69, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x2e,
	0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e,
	0x69, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x22, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x49, 0x6e, 0x69, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x0d, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x6f, 0x6f,
	0x6c, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x54, 0x0a, 0x0b, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x21, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x22, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x0b, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x21, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72,
	0x70, 0x63, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x0a,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x2e, 0x70, 0x6f, 0x6f,
	0x6c, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70,
	0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x59, 0x0a, 0x15, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72,
	0x70, 0x63, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x1d, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70,
	0x63, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x54, 0x0a, 0x10, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x12, 0x1d,
	0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x1d, 0x2e,
	0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x28, 0x01, 0x30, 0x01,
	0x12, 0x36, 0x0a, 0x05, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x12, 0x15, 0x2e, 0x70, 0x6f, 0x6f, 0x6c,
	0x72, 0x70, 0x63, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x15, 0x52, 0x65, 0x6c, 0x65,
	0x76, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x12, 0x1d, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x6c, 0x65,
	0x76, 0x61, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x76,
	0x61, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x4e, 0x0a, 0x0d, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x1d, 0x2e, 0x70, 0x6f, 0x6f, 0x6c,
	0x72, 0x70, 0x63, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72,
	0x70, 0x63, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x0a, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x20, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72,
	0x70, 0x63, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x0e, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x12, 0x1e, 0x2e,
	0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45,
	0x0a, 0x0a, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x2e, 0x70,
	0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72,
	0x70, 0x63, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x69, 0x6e, 0x67, 0x6c, 0x61, 0x62,
	0x73, 0x2f, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x65,
	0x72, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_auctioneer_proto_rawDescOnce sync.Once
	file_auctioneer_proto_rawDescData = file_auctioneer_proto_rawDesc
)

func file_auctioneer_proto_rawDescGZIP() []byte {
	file_auctioneer_proto_rawDescOnce.Do(func() {
		file_auctioneer_proto_rawDescData = protoimpl.X.CompressGZIP(file_auctioneer_proto_rawDescData)
	})
	return file_auctioneer_proto_rawDescData
}

var file_auctioneer_proto_enumTypes = make([]protoimpl.EnumInfo, 12)
var file_auctioneer_proto_msgTypes = make([]protoimpl.MessageInfo, 79)
var file_auctioneer_proto_goTypes = []interface{}{
	(ChannelType)(0),                    // 0: poolrpc.ChannelType
	(AuctionAccountState)(0),            // 1: poolrpc.AuctionAccountState
	(OrderChannelType)(0),               // 2: poolrpc.OrderChannelType
	(NodeTier)(0),                       // 3: poolrpc.NodeTier
	(ChannelAnnouncementConstraints)(0), // 4: poolrpc.ChannelAnnouncementConstraints
	(OrderState)(0),                     // 5: poolrpc.OrderState
	(DurationBucketState)(0),            // 6: poolrpc.DurationBucketState
	(OrderMatchReject_RejectReason)(0),  // 7: poolrpc.OrderMatchReject.RejectReason
	(OrderReject_OrderRejectReason)(0),  // 8: poolrpc.OrderReject.OrderRejectReason
	(SubscribeError_Error)(0),           // 9: poolrpc.SubscribeError.Error
	(AccountDiff_AccountState)(0),       // 10: poolrpc.AccountDiff.AccountState
	(InvalidOrder_FailReason)(0),        // 11: poolrpc.InvalidOrder.FailReason
	(*ReserveAccountRequest)(nil),       // 12: poolrpc.ReserveAccountRequest
	(*ReserveAccountResponse)(nil),      // 13: poolrpc.ReserveAccountResponse
	(*ServerInitAccountRequest)(nil),    // 14: poolrpc.ServerInitAccountRequest
	(*ServerInitAccountResponse)(nil),   // 15: poolrpc.ServerInitAccountResponse
	(*ServerSubmitOrderRequest)(nil),    // 16: poolrpc.ServerSubmitOrderRequest
	(*ServerSubmitOrderResponse)(nil),   // 17: poolrpc.ServerSubmitOrderResponse
	(*ServerCancelOrderRequest)(nil),    // 18: poolrpc.ServerCancelOrderRequest
	(*ServerCancelOrderResponse)(nil),   // 19: poolrpc.ServerCancelOrderResponse
	(*ClientAuctionMessage)(nil),        // 20: poolrpc.ClientAuctionMessage
	(*AccountCommitment)(nil),           // 21: poolrpc.AccountCommitment
	(*AccountSubscription)(nil),         // 22: poolrpc.AccountSubscription
	(*OrderMatchAccept)(nil),            // 23: poolrpc.OrderMatchAccept
	(*OrderMatchReject)(nil),            // 24: poolrpc.OrderMatchReject
	(*OrderReject)(nil),                 // 25: poolrpc.OrderReject
	(*ChannelInfo)(nil),                 // 26: poolrpc.ChannelInfo
	(*OrderMatchSign)(nil),              // 27: poolrpc.OrderMatchSign
	(*AccountRecovery)(nil),             // 28: poolrpc.AccountRecovery
	(*ServerAuctionMessage)(nil),        // 29: poolrpc.ServerAuctionMessage
	(*ServerChallenge)(nil),             // 30: poolrpc.ServerChallenge
	(*SubscribeSuccess)(nil),            // 31: poolrpc.SubscribeSuccess
	(*MatchedMarket)(nil),               // 32: poolrpc.MatchedMarket
	(*OrderMatchPrepare)(nil),           // 33: poolrpc.OrderMatchPrepare
	(*TxOut)(nil),                       // 34: poolrpc.TxOut
	(*OrderMatchSignBegin)(nil),         // 35: poolrpc.OrderMatchSignBegin
	(*OrderMatchFinalize)(nil),          // 36: poolrpc.OrderMatchFinalize
	(*SubscribeError)(nil),              // 37: poolrpc.SubscribeError
	(*AuctionAccount)(nil),              // 38: poolrpc.AuctionAccount
	(*MatchedOrder)(nil),                // 39: poolrpc.MatchedOrder
	(*MatchedAsk)(nil),                  // 40: poolrpc.MatchedAsk
	(*MatchedBid)(nil),                  // 41: poolrpc.MatchedBid
	(*AccountDiff)(nil),                 // 42: poolrpc.AccountDiff
	(*ServerOrder)(nil),                 // 43: poolrpc.ServerOrder
	(*ServerBid)(nil),                   // 44: poolrpc.ServerBid
	(*ServerAsk)(nil),                   // 45: poolrpc.ServerAsk
	(*CancelOrder)(nil),                 // 46: poolrpc.CancelOrder
	(*InvalidOrder)(nil),                // 47: poolrpc.InvalidOrder
	(*ServerInput)(nil),                 // 48: poolrpc.ServerInput
	(*ServerOutput)(nil),                // 49: poolrpc.ServerOutput
	(*ServerModifyAccountRequest)(nil),  // 50: poolrpc.ServerModifyAccountRequest
	(*ServerModifyAccountResponse)(nil), // 51: poolrpc.ServerModifyAccountResponse
	(*ServerOrderStateRequest)(nil),     // 52: poolrpc.ServerOrderStateRequest
	(*ServerOrderStateResponse)(nil),    // 53: poolrpc.ServerOrderStateResponse
	(*TermsRequest)(nil),                // 54: poolrpc.TermsRequest
	(*TermsResponse)(nil),               // 55: poolrpc.TermsResponse
	(*RelevantBatchRequest)(nil),        // 56: poolrpc.RelevantBatchRequest
	(*RelevantBatch)(nil),               // 57: poolrpc.RelevantBatch
	(*ExecutionFee)(nil),                // 58: poolrpc.ExecutionFee
	(*NodeAddress)(nil),                 // 59: poolrpc.NodeAddress
	(*OutPoint)(nil),                    // 60: poolrpc.OutPoint
	(*AskSnapshot)(nil),                 // 61: poolrpc.AskSnapshot
	(*BidSnapshot)(nil),                 // 62: poolrpc.BidSnapshot
	(*MatchedOrderSnapshot)(nil),        // 63: poolrpc.MatchedOrderSnapshot
	(*BatchSnapshotRequest)(nil),        // 64: poolrpc.BatchSnapshotRequest
	(*MatchedMarketSnapshot)(nil),       // 65: poolrpc.MatchedMarketSnapshot
	(*BatchSnapshotResponse)(nil),       // 66: poolrpc.BatchSnapshotResponse
	(*ServerNodeRatingRequest)(nil),     // 67: poolrpc.ServerNodeRatingRequest
	(*NodeRating)(nil),                  // 68: poolrpc.NodeRating
	(*ServerNodeRatingResponse)(nil),    // 69: poolrpc.ServerNodeRatingResponse
	(*BatchSnapshotsRequest)(nil),       // 70: poolrpc.BatchSnapshotsRequest
	(*BatchSnapshotsResponse)(nil),      // 71: poolrpc.BatchSnapshotsResponse
	(*MarketInfoRequest)(nil),           // 72: poolrpc.MarketInfoRequest
	(*MarketInfo)(nil),                  // 73: poolrpc.MarketInfo
	(*MarketInfoResponse)(nil),          // 74: poolrpc.MarketInfoResponse
	nil,                                 // 75: poolrpc.OrderMatchReject.RejectedOrdersEntry
	nil,                                 // 76: poolrpc.OrderMatchSign.AccountSigsEntry
	nil,                                 // 77: poolrpc.OrderMatchSign.ChannelInfosEntry
	nil,                                 // 78: poolrpc.OrderMatchSign.TraderNoncesEntry
	nil,                                 // 79: poolrpc.MatchedMarket.MatchedOrdersEntry
	nil,                                 // 80: poolrpc.OrderMatchPrepare.MatchedOrdersEntry
	nil,                                 // 81: poolrpc.OrderMatchPrepare.MatchedMarketsEntry
	nil,                                 // 82: poolrpc.OrderMatchSignBegin.ServerNoncesEntry
	(*ServerModifyAccountRequest_NewAccountParameters)(nil), // 83: poolrpc.ServerModifyAccountRequest.NewAccountParameters
	nil,                          // 84: poolrpc.TermsResponse.LeaseDurationsEntry
	nil,                          // 85: poolrpc.TermsResponse.LeaseDurationBucketsEntry
	nil,                          // 86: poolrpc.RelevantBatch.MatchedOrdersEntry
	nil,                          // 87: poolrpc.RelevantBatch.MatchedMarketsEntry
	nil,                          // 88: poolrpc.BatchSnapshotResponse.MatchedMarketsEntry
	(*MarketInfo_TierValue)(nil), // 89: poolrpc.MarketInfo.TierValue
	nil,                          // 90: poolrpc.MarketInfoResponse.MarketsEntry
}
var file_auctioneer_proto_depIdxs = []int32{
	60,  // 0: poolrpc.ServerInitAccountRequest.account_point:type_name -> poolrpc.OutPoint
	45,  // 1: poolrpc.ServerSubmitOrderRequest.ask:type_name -> poolrpc.ServerAsk
	44,  // 2: poolrpc.ServerSubmitOrderRequest.bid:type_name -> poolrpc.ServerBid
	47,  // 3: poolrpc.ServerSubmitOrderResponse.invalid_order:type_name -> poolrpc.InvalidOrder
	21,  // 4: poolrpc.ClientAuctionMessage.commit:type_name -> poolrpc.AccountCommitment
	22,  // 5: poolrpc.ClientAuctionMessage.subscribe:type_name -> poolrpc.AccountSubscription
	23,  // 6: poolrpc.ClientAuctionMessage.accept:type_name -> poolrpc.OrderMatchAccept
	24,  // 7: poolrpc.ClientAuctionMessage.reject:type_name -> poolrpc.OrderMatchReject
	27,  // 8: poolrpc.ClientAuctionMessage.sign:type_name -> poolrpc.OrderMatchSign
	28,  // 9: poolrpc.ClientAuctionMessage.recover:type_name -> poolrpc.AccountRecovery
	7,   // 10: poolrpc.OrderMatchReject.reason_code:type_name -> poolrpc.OrderMatchReject.RejectReason
	75,  // 11: poolrpc.OrderMatchReject.rejected_orders:type_name -> poolrpc.OrderMatchReject.RejectedOrdersEntry
	8,   // 12: poolrpc.OrderReject.reason_code:type_name -> poolrpc.OrderReject.OrderRejectReason
	0,   // 13: poolrpc.ChannelInfo.type:type_name -> poolrpc.ChannelType
	76,  // 14: poolrpc.OrderMatchSign.account_sigs:type_name -> poolrpc.OrderMatchSign.AccountSigsEntry
	77,  // 15: poolrpc.OrderMatchSign.channel_infos:type_name -> poolrpc.OrderMatchSign.ChannelInfosEntry
	78,  // 16: poolrpc.OrderMatchSign.trader_nonces:type_name -> poolrpc.OrderMatchSign.TraderNoncesEntry
	30,  // 17: poolrpc.ServerAuctionMessage.challenge:type_name -> poolrpc.ServerChallenge
	31,  // 18: poolrpc.ServerAuctionMessage.success:type_name -> poolrpc.SubscribeSuccess
	37,  // 19: poolrpc.ServerAuctionMessage.error:type_name -> poolrpc.SubscribeError
	33,  // 20: poolrpc.ServerAuctionMessage.prepare:type_name -> poolrpc.OrderMatchPrepare
	35,  // 21: poolrpc.ServerAuctionMessage.sign:type_name -> poolrpc.OrderMatchSignBegin
	36,  // 22: poolrpc.ServerAuctionMessage.finalize:type_name -> poolrpc.OrderMatchFinalize
	38,  // 23: poolrpc.ServerAuctionMessage.account:type_name -> poolrpc.AuctionAccount
	79,  // 24: poolrpc.MatchedMarket.matched_orders:type_name -> poolrpc.MatchedMarket.MatchedOrdersEntry
	80,  // 25: poolrpc.OrderMatchPrepare.matched_orders:type_name -> poolrpc.OrderMatchPrepare.MatchedOrdersEntry
	42,  // 26: poolrpc.OrderMatchPrepare.charged_accounts:type_name -> poolrpc.AccountDiff
	58,  // 27: poolrpc.OrderMatchPrepare.execution_fee:type_name -> poolrpc.ExecutionFee
	81,  // 28: poolrpc.OrderMatchPrepare.matched_markets:type_name -> poolrpc.OrderMatchPrepare.MatchedMarketsEntry
	82,  // 29: poolrpc.OrderMatchSignBegin.server_nonces:type_name -> poolrpc.OrderMatchSignBegin.ServerNoncesEntry
	34,  // 30: poolrpc.OrderMatchSignBegin.prev_outputs:type_name -> poolrpc.TxOut
	9,   // 31: poolrpc.SubscribeError.error_code:type_name -> poolrpc.SubscribeError.Error
	38,  // 32: poolrpc.SubscribeError.account_reservation:type_name -> poolrpc.AuctionAccount
	1,   // 33: poolrpc.AuctionAccount.state:type_name -> poolrpc.AuctionAccountState
	60,  // 34: poolrpc.AuctionAccount.outpoint:type_name -> poolrpc.OutPoint
	41,  // 35: poolrpc.MatchedOrder.matched_bids:type_name -> poolrpc.MatchedBid
	40,  // 36: poolrpc.MatchedOrder.matched_asks:type_name -> poolrpc.MatchedAsk
	45,  // 37: poolrpc.MatchedAsk.ask:type_name -> poolrpc.ServerAsk
	44,  // 38: poolrpc.MatchedBid.bid:type_name -> poolrpc.ServerBid
	10,  // 39: poolrpc.AccountDiff.ending_state:type_name -> poolrpc.AccountDiff.AccountState
	59,  // 40: poolrpc.ServerOrder.node_addr:type_name -> poolrpc.NodeAddress
	2,   // 41: poolrpc.ServerOrder.channel_type:type_name -> poolrpc.OrderChannelType
	43,  // 42: poolrpc.ServerBid.details:type_name -> poolrpc.ServerOrder
	3,   // 43: poolrpc.ServerBid.min_node_tier:type_name -> poolrpc.NodeTier
	43,  // 44: poolrpc.ServerAsk.details:type_name -> poolrpc.ServerOrder
	4,   // 45: poolrpc.ServerAsk.announcement_constraints:type_name -> poolrpc.ChannelAnnouncementConstraints
	11,  // 46: poolrpc.InvalidOrder.fail_reason:type_name -> poolrpc.InvalidOrder.FailReason
	60,  // 47: poolrpc.ServerInput.outpoint:type_name -> poolrpc.OutPoint
	48,  // 48: poolrpc.ServerModifyAccountRequest.new_inputs:type_name -> poolrpc.ServerInput
	49,  // 49: poolrpc.ServerModifyAccountRequest.new_outputs:type_name -> poolrpc.ServerOutput
	83,  // 50: poolrpc.ServerModifyAccountRequest.new_params:type_name -> poolrpc.ServerModifyAccountRequest.NewAccountParameters
	34,  // 51: poolrpc.ServerModifyAccountRequest.prev_outputs:type_name -> poolrpc.TxOut
	5,   // 52: poolrpc.ServerOrderStateResponse.state:type_name -> poolrpc.OrderState
	58,  // 53: poolrpc.TermsResponse.execution_fee:type_name -> poolrpc.ExecutionFee
	84,  // 54: poolrpc.TermsResponse.lease_durations:type_name -> poolrpc.TermsResponse.LeaseDurationsEntry
	85,  // 55: poolrpc.TermsResponse.lease_duration_buckets:type_name -> poolrpc.TermsResponse.LeaseDurationBucketsEntry
	42,  // 56: poolrpc.RelevantBatch.charged_accounts:type_name -> poolrpc.AccountDiff
	86,  // 57: poolrpc.RelevantBatch.matched_orders:type_name -> poolrpc.RelevantBatch.MatchedOrdersEntry
	58,  // 58: poolrpc.RelevantBatch.execution_fee:type_name -> poolrpc.ExecutionFee
	87,  // 59: poolrpc.RelevantBatch.matched_markets:type_name -> poolrpc.RelevantBatch.MatchedMarketsEntry
	2,   // 60: poolrpc.AskSnapshot.chan_type:type_name -> poolrpc.OrderChannelType
	2,   // 61: poolrpc.BidSnapshot.chan_type:type_name -> poolrpc.OrderChannelType
	61,  // 62: poolrpc.MatchedOrderSnapshot.ask:type_name -> poolrpc.AskSnapshot
	62,  // 63: poolrpc.MatchedOrderSnapshot.bid:type_name -> poolrpc.BidSnapshot
	63,  // 64: poolrpc.MatchedMarketSnapshot.matched_orders:type_name -> poolrpc.MatchedOrderSnapshot
	63,  // 65: poolrpc.BatchSnapshotResponse.matched_orders:type_name -> poolrpc.MatchedOrderSnapshot
	88,  // 66: poolrpc.BatchSnapshotResponse.matched_markets:type_name -> poolrpc.BatchSnapshotResponse.MatchedMarketsEntry
	3,   // 67: poolrpc.NodeRating.node_tier:type_name -> poolrpc.NodeTier
	68,  // 68: poolrpc.ServerNodeRatingResponse.node_ratings:type_name -> poolrpc.NodeRating
	66,  // 69: poolrpc.BatchSnapshotsResponse.batches:type_name -> poolrpc.BatchSnapshotResponse
	89,  // 70: poolrpc.MarketInfo.num_asks:type_name -> poolrpc.MarketInfo.TierValue
	89,  // 71: poolrpc.MarketInfo.num_bids:type_name -> poolrpc.MarketInfo.TierValue
	89,  // 72: poolrpc.MarketInfo.ask_open_interest_units:type_name -> poolrpc.MarketInfo.TierValue
	89,  // 73: poolrpc.MarketInfo.bid_open_interest_units:type_name -> poolrpc.MarketInfo.TierValue
	90,  // 74: poolrpc.MarketInfoResponse.markets:type_name -> poolrpc.MarketInfoResponse.MarketsEntry
	25,  // 75: poolrpc.OrderMatchReject.RejectedOrdersEntry.value:type_name -> poolrpc.OrderReject
	26,  // 76: poolrpc.OrderMatchSign.ChannelInfosEntry.value:type_name -> poolrpc.ChannelInfo
	39,  // 77: poolrpc.MatchedMarket.MatchedOrdersEntry.value:type_name -> poolrpc.MatchedOrder
	39,  // 78: poolrpc.OrderMatchPrepare.MatchedOrdersEntry.value:type_name -> poolrpc.MatchedOrder
	32,  // 79: poolrpc.OrderMatchPrepare.MatchedMarketsEntry.value:type_name -> poolrpc.MatchedMarket
	6,   // 80: poolrpc.TermsResponse.LeaseDurationBucketsEntry.value:type_name -> poolrpc.DurationBucketState
	39,  // 81: poolrpc.RelevantBatch.MatchedOrdersEntry.value:type_name -> poolrpc.MatchedOrder
	32,  // 82: poolrpc.RelevantBatch.MatchedMarketsEntry.value:type_name -> poolrpc.MatchedMarket
	65,  // 83: poolrpc.BatchSnapshotResponse.MatchedMarketsEntry.value:type_name -> poolrpc.MatchedMarketSnapshot
	3,   // 84: poolrpc.MarketInfo.TierValue.tier:type_name -> poolrpc.NodeTier
	73,  // 85: poolrpc.MarketInfoResponse.MarketsEntry.value:type_name -> poolrpc.MarketInfo
	12,  // 86: poolrpc.ChannelAuctioneer.ReserveAccount:input_type -> poolrpc.ReserveAccountRequest
	14,  // 87: poolrpc.ChannelAuctioneer.InitAccount:input_type -> poolrpc.ServerInitAccountRequest
	50,  // 88: poolrpc.ChannelAuctioneer.ModifyAccount:input_type -> poolrpc.ServerModifyAccountRequest
	16,  // 89: poolrpc.ChannelAuctioneer.SubmitOrder:input_type -> poolrpc.ServerSubmitOrderRequest
	18,  // 90: poolrpc.ChannelAuctioneer.CancelOrder:input_type -> poolrpc.ServerCancelOrderRequest
	52,  // 91: poolrpc.ChannelAuctioneer.OrderState:input_type -> poolrpc.ServerOrderStateRequest
	20,  // 92: poolrpc.ChannelAuctioneer.SubscribeBatchAuction:input_type -> poolrpc.ClientAuctionMessage
	20,  // 93: poolrpc.ChannelAuctioneer.SubscribeSidecar:input_type -> poolrpc.ClientAuctionMessage
	54,  // 94: poolrpc.ChannelAuctioneer.Terms:input_type -> poolrpc.TermsRequest
	56,  // 95: poolrpc.ChannelAuctioneer.RelevantBatchSnapshot:input_type -> poolrpc.RelevantBatchRequest
	64,  // 96: poolrpc.ChannelAuctioneer.BatchSnapshot:input_type -> poolrpc.BatchSnapshotRequest
	67,  // 97: poolrpc.ChannelAuctioneer.NodeRating:input_type -> poolrpc.ServerNodeRatingRequest
	70,  // 98: poolrpc.ChannelAuctioneer.BatchSnapshots:input_type -> poolrpc.BatchSnapshotsRequest
	72,  // 99: poolrpc.ChannelAuctioneer.MarketInfo:input_type -> poolrpc.MarketInfoRequest
	13,  // 100: poolrpc.ChannelAuctioneer.ReserveAccount:output_type -> poolrpc.ReserveAccountResponse
	15,  // 101: poolrpc.ChannelAuctioneer.InitAccount:output_type -> poolrpc.ServerInitAccountResponse
	51,  // 102: poolrpc.ChannelAuctioneer.ModifyAccount:output_type -> poolrpc.ServerModifyAccountResponse
	17,  // 103: poolrpc.ChannelAuctioneer.SubmitOrder:output_type -> poolrpc.ServerSubmitOrderResponse
	19,  // 104: poolrpc.ChannelAuctioneer.CancelOrder:output_type -> poolrpc.ServerCancelOrderResponse
	53,  // 105: poolrpc.ChannelAuctioneer.OrderState:output_type -> poolrpc.ServerOrderStateResponse
	29,  // 106: poolrpc.ChannelAuctioneer.SubscribeBatchAuction:output_type -> poolrpc.ServerAuctionMessage
	29,  // 107: poolrpc.ChannelAuctioneer.SubscribeSidecar:output_type -> poolrpc.ServerAuctionMessage
	55,  // 108: poolrpc.ChannelAuctioneer.Terms:output_type -> poolrpc.TermsResponse
	57,  // 109: poolrpc.ChannelAuctioneer.RelevantBatchSnapshot:output_type -> poolrpc.RelevantBatch
	66,  // 110: poolrpc.ChannelAuctioneer.BatchSnapshot:output_type -> poolrpc.BatchSnapshotResponse
	69,  // 111: poolrpc.ChannelAuctioneer.NodeRating:output_type -> poolrpc.ServerNodeRatingResponse
	71,  // 112: poolrpc.ChannelAuctioneer.BatchSnapshots:output_type -> poolrpc.BatchSnapshotsResponse
	74,  // 113: poolrpc.ChannelAuctioneer.MarketInfo:output_type -> poolrpc.MarketInfoResponse
	100, // [100:114] is the sub-list for method output_type
	86,  // [86:100] is the sub-list for method input_type
	86,  // [86:86] is the sub-list for extension type_name
	86,  // [86:86] is the sub-list for extension extendee
	0,   // [0:86] is the sub-list for field type_name
}

func init() { file_auctioneer_proto_init() }
func file_auctioneer_proto_init() {
	if File_auctioneer_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_auctioneer_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReserveAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auctioneer_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReserveAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auctioneer_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerInitAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auctioneer_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerInitAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auctioneer_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerSubmitOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auctioneer_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerSubmitOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auctioneer_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerCancelOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auctioneer_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerCancelOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auctioneer_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientAuctionMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auctioneer_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountCommitment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auctioneer_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountSubscription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auctioneer_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderMatchAccept); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auctioneer_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderMatchReject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auctioneer_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderReject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auctioneer_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auctioneer_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderMatchSign); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auctioneer_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountRecovery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auctioneer_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerAuctionMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auctioneer_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerChallenge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auctioneer_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeSuccess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auctioneer_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchedMarket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auctioneer_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderMatchPrepare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auctioneer_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auctioneer_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderMatchSignBegin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auctioneer_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderMatchFinalize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auctioneer_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auctioneer_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuctionAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auctioneer_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchedOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auctioneer_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchedAsk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auctioneer_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchedBid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auctioneer_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountDiff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auctioneer_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auctioneer_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerBid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auctioneer_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerAsk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auctioneer_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auctioneer_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvalidOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auctioneer_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auctioneer_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auctioneer_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerModifyAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auctioneer_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerModifyAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auctioneer_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerOrderStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auctioneer_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerOrderStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auctioneer_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TermsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auctioneer_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TermsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auctioneer_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelevantBatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auctioneer_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelevantBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auctioneer_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionFee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auctioneer_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auctioneer_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auctioneer_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AskSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auctioneer_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auctioneer_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchedOrderSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auctioneer_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchSnapshotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auctioneer_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchedMarketSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auctioneer_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchSnapshotResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auctioneer_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerNodeRatingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auctioneer_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeRating); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auctioneer_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerNodeRatingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auctioneer_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchSnapshotsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auctioneer_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchSnapshotsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auctioneer_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auctioneer_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auctioneer_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auctioneer_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerModifyAccountRequest_NewAccountParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auctioneer_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketInfo_TierValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_auctioneer_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*ServerSubmitOrderRequest_Ask)(nil),
		(*ServerSubmitOrderRequest_Bid)(nil),
	}
	file_auctioneer_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*ServerSubmitOrderResponse_InvalidOrder)(nil),
		(*ServerSubmitOrderResponse_Accepted)(nil),
	}
	file_auctioneer_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*ClientAuctionMessage_Commit)(nil),
		(*ClientAuctionMessage_Subscribe)(nil),
		(*ClientAuctionMessage_Accept)(nil),
		(*ClientAuctionMessage_Reject)(nil),
		(*ClientAuctionMessage_Sign)(nil),
		(*ClientAuctionMessage_Recover)(nil),
	}
	file_auctioneer_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*ServerAuctionMessage_Challenge)(nil),
		(*ServerAuctionMessage_Success)(nil),
		(*ServerAuctionMessage_Error)(nil),
		(*ServerAuctionMessage_Prepare)(nil),
		(*ServerAuctionMessage_Sign)(nil),
		(*ServerAuctionMessage_Finalize)(nil),
		(*ServerAuctionMessage_Account)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_auctioneer_proto_rawDesc,
			NumEnums:      12,
			NumMessages:   79,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_auctioneer_proto_goTypes,
		DependencyIndexes: file_auctioneer_proto_depIdxs,
		EnumInfos:         file_auctioneer_proto_enumTypes,
		MessageInfos:      file_auctioneer_proto_msgTypes,
	}.Build()
	File_auctioneer_proto = out.File
	file_auctioneer_proto_rawDesc = nil
	file_auctioneer_proto_goTypes = nil
	file_auctioneer_proto_depIdxs = nil
}
