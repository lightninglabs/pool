syntax = "proto3";

import "google/api/annotations.proto";
import "auctioneer.proto";

package clmrpc;

option go_package = "github.com/lightninglabs/llm/clmrpc";

service Trader {
    rpc InitAccount (InitAccountRequest) returns (Account) {
        option (google.api.http) = {
            post: "/v1/clm/accounts"
            body: "*"
        };
    };

    rpc ListAccounts (ListAccountsRequest) returns (ListAccountsResponse) {
        option (google.api.http) = {
            get: "/v1/clm/accounts"
        };
    };

    rpc CloseAccount (CloseAccountRequest) returns (CloseAccountResponse) {
        option (google.api.http) = {
            delete: "/v1/clm/accounts"
        };
    };

    rpc WithdrawAccount (WithdrawAccountRequest) returns (WithdrawAccountResponse) {
        option (google.api.http) = {
            post: "/v1/clm/accounts/withdraw"
            body: "*"
        };
    };

    rpc DepositAccount (DepositAccountRequest) returns (DepositAccountResponse) {
        option (google.api.http) = {
            post: "/v1/clm/accounts/deposit"
            body: "*"
        };
    };

    rpc RecoverAccounts (RecoverAccountsRequest) returns (RecoverAccountsResponse) {
        option (google.api.http) = {
            post: "/v1/clm/accounts/recover"
            body: "*"
        };
    };

    rpc SubmitOrder (SubmitOrderRequest) returns (SubmitOrderResponse) {
        option (google.api.http) = {
            post: "/v1/clm/orders"
            body: "*"
        };
    };

    rpc ListOrders (ListOrdersRequest) returns (ListOrdersResponse) {
        option (google.api.http) = {
            get: "/v1/clm/orders"
        };
    }

    rpc CancelOrder (CancelOrderRequest) returns (CancelOrderResponse) {
        option (google.api.http) = {
            delete: "/v1/clm/orders/{order_nonce}"
        };
    };
}

message InitAccountRequest {
    uint64 account_value = 1;

    oneof account_expiry {
        uint32 absolute_height = 2;
        uint32 relative_height = 3;
    }
}

message ListAccountsRequest {
}
message ListAccountsResponse {
    repeated Account accounts = 1;
}

message Output {
    // The value, in satoshis, of the output.
    uint64 value_sat = 1;

    // The address corresponding to the output.
    string address = 2;
}

message CloseAccountRequest {
    // The trader key associated with the account that will be closed.
    bytes trader_key = 1;

    /*
    The outputs that should be created as a result of closing the account. If
    none are specified, then the funds within the account are sent to an address
    the backing lnd node controls.
    */
    repeated Output outputs = 2;
}
message CloseAccountResponse {
    // The hash of the closing transaction.
    bytes close_txid = 1;
}

message WithdrawAccountRequest {
    /*
    The trader key associated with the account that funds will be withdrawed
    from.
    */
    bytes trader_key = 1;

    // The outputs we'll withdraw funds from the account into.
    repeated Output outputs = 2;

    /*
    The fee rate, in satoshis per vbyte, to use for the withdrawal transaction.
    */
    uint64 sat_per_vbyte = 3;
}
message WithdrawAccountResponse {
    // The state of the account after processing the withdrawal.
    Account account = 1;

    // The transaction used to withdraw funds from the account.
    bytes withdraw_txid = 2;
}

message DepositAccountRequest {
    /*
    The trader key associated with the account that funds will be deposited
    into.
    */
    bytes trader_key = 1;

    // The amount in satoshis to deposit into the account.
    uint64 amount_sat = 2;

    /*
    The fee rate, in satoshis per vbyte, to use for the deposit transaction.
    */
    uint32 sat_per_vbyte = 3;
}
message DepositAccountResponse {
    // The state of the account after processing the deposit.
    Account account = 1;

    // The transaction used to deposit funds into the account.
    bytes deposit_txid = 2;
}

enum AccountState {
    // The state of an account when it is pending its confirmation on-chain.
    PENDING_OPEN = 0;

    /*
    The state of an account when it has undergone an update on-chain either as
    part of a matched order or a trader modification and it is pending its
    confirmation on-chain.
    */
    PENDING_UPDATE = 1;

    // The state of an account once it has confirmed on-chain.
    OPEN = 2;

    /*
    The state of an account once its expiration has been reached and its closing
    transaction has confirmed.
    */
    EXPIRED = 3;

    /*
    The state of an account when we're waiting for the closing transaction of
    an account to confirm that required cooperation with the auctioneer.
    */
    PENDING_CLOSED = 4;

    // The state of an account once its closing transaction has confirmed.
    CLOSED = 5;

    /*
    The state of an account that indicates that the account was attempted to be
    recovered but failed because the opening transaction wasn't found by lnd.
    This could be because it was never published or it never confirmed. Then the
    funds are SAFU and the account can be considered to never have been opened
    in the first place.
    */
    RECOVERY_FAILED = 6;
}

message Account {
    /*
    The identifying component of an account. This is the key used for the trader
    in the 2-of-2 multi-sig construction of an account with an auctioneer.
    */
    bytes trader_key = 1;

    /*
    The current outpoint associated with the account. This will change every
    time the account has been updated.
    */
    OutPoint outpoint = 2;

    // The current value in satoshis of the account.
    uint64 value = 3;

    // The height at which the account will expire.
    uint32 expiration_height = 4;

    // The current state of the account.
    AccountState state = 5;

    // The hash of the account's closing transaction, if any.
    bytes close_txid = 6;
}

message SubmitOrderRequest {
    oneof details {
        Ask ask = 1;
        Bid bid = 2;
    }
}
message SubmitOrderResponse {
    oneof details {
        /*
        Order failed with the given reason.
        */
        InvalidOrder invalid_order = 1;

        /*
        The order nonce of the accepted order.
        */
        bytes accepted_order_nonce = 2;
    }
}

message ListOrdersRequest {
}
message ListOrdersResponse {
    repeated Ask asks = 1;
    repeated Bid bids = 2;
}

message CancelOrderRequest {
    bytes order_nonce = 1;
}
message CancelOrderResponse {
}

message Order {
    /*
    The trader's account key of the account that is used for the order.
    */
    bytes trader_key = 1;

    /*
    Fixed order rate in parts per million.
    */
    uint32 rate_fixed = 2;

    /*
    Order amount in satoshis.
    */
    uint64 amt = 3;

    /*
    Preferred fee rate to be used for the channel funding transaction, expressed
    in satoshis per 1000 weight units (sat/kW).
    */
    uint64 funding_fee_rate = 4;

    /*
    Order nonce, acts as unique order identifier.
    */
    bytes order_nonce = 5;

    /*
    The state the order currently is in.
    */
    OrderState state = 6;

    /*
    The number of order units the amount corresponds to.
    */
    uint32 units = 7;

    /*
    The number of currently unfilled units of this order. This will be equal to
    the total amount of units until the order has reached the state PARTIAL_FILL
    or EXECUTED.
    */
    uint32 units_unfulfilled = 8;
}

message Bid {
    /*
    The common fields shared between both ask and bid order types.
    */
    Order details = 1;

    /*
    Required minimum number of blocks that a channel opened as a result of this
    bid should be kept open.
    */
    uint32 min_duration_blocks = 2;

    /*
    The version of the order format that is used. Will be increased once new
    features are added.
    */
    uint32 version = 3;
}

message Ask {
    /*
    The common fields shared between both ask and bid order types.
    */
    Order details = 1;

    /*
    The maximum number of blocks the liquidity provider is willing to provide
    the channel funds for.
    */
    uint32 max_duration_blocks = 2;

    /*
    The version of the order format that is used. Will be increased once new
    features are added.
    */
    uint32 version = 3;
}

message RecoverAccountsRequest {
}

message RecoverAccountsResponse {
    // The number of accounts that were recovered.
    uint32 num_recovered_accounts = 1;
}
